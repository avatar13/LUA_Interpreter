// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  AVATAR-èä
// DateTime: 05.01.2012 12:07:35
// UserName: Avatar
// Input file <Grammar_LUA.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using LUA_Interpreter;

namespace LuaSyntax
{
public enum Tokens {error=126,
    EOF=127,str=128,digit=129,identifer=130,end=131,inT=132,
    repeatT=133,breakT=134,local=135,returnT=136,doT=137,forT=138,
    nil=139,then=140,elseT=141,functionT=142,elseifT=143,ifT=144,
    untilT=145,whileT=146,SMTH=147,ge=148,le=149,e=150,
    ne=151,doublePoint=152,or=153,and=154,not=155,UMINUS=156};

public struct ValueType
{
	public TreeNode<Node> TN;
	public TreeNodeList<Node> TNL;
	public string s;	
	public int i;
	public double d;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{	
	double _baseNumber = 0;
	ASTree m_tree;
#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

  protected override void Initialize()
  {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

    this.InitStateTable(195);
    AddState(0,new State(-4,new int[]{-38,1,-18,3}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{127,4,130,52,137,73,146,76,133,114,144,118,136,131,134,134,138,135,142,154,135,174},new int[]{-6,5,-3,8,-5,67,-1,51,-21,53,-20,72}));
    AddState(4,new State(-2));
    AddState(5,new State(new int[]{59,7,127,-6,130,-6,137,-6,146,-6,133,-6,144,-6,136,-6,134,-6,138,-6,142,-6,135,-6,131,-6,145,-6,143,-6,141,-6},new int[]{-40,6}));
    AddState(6,new State(-3));
    AddState(7,new State(-5));
    AddState(8,new State(new int[]{61,9}));
    AddState(9,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-4,10,-16,133,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(10,new State(new int[]{44,11,59,-8,127,-8,130,-8,137,-8,146,-8,133,-8,144,-8,136,-8,134,-8,138,-8,142,-8,135,-8,131,-8,145,-8,143,-8,141,-8}));
    AddState(11,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,12,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(12,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41,44,-47,59,-47,127,-47,130,-47,137,-47,146,-47,133,-47,144,-47,136,-47,134,-47,138,-47,142,-47,135,-47,131,-47,145,-47,143,-47,141,-47,41,-47}));
    AddState(13,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,14,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(14,new State(new int[]{42,-58,47,-58,37,-58,43,-58,45,-58,94,23,152,-58,60,-58,62,-58,149,-58,148,-58,150,-58,151,-58,154,-58,153,-58,44,-58,59,-58,127,-58,130,-58,137,-58,146,-58,133,-58,144,-58,136,-58,134,-58,138,-58,142,-58,135,-58,131,-58,145,-58,143,-58,141,-58,41,-58,93,-58,125,-58,140,-58}));
    AddState(15,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,16,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(16,new State(new int[]{42,-59,47,-59,37,-59,43,-59,45,-59,94,23,152,-59,60,-59,62,-59,149,-59,148,-59,150,-59,151,-59,154,-59,153,-59,44,-59,59,-59,127,-59,130,-59,137,-59,146,-59,133,-59,144,-59,136,-59,134,-59,138,-59,142,-59,135,-59,131,-59,145,-59,143,-59,141,-59,41,-59,93,-59,125,-59,140,-59}));
    AddState(17,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,18,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(18,new State(new int[]{42,-60,47,-60,37,-60,43,-60,45,-60,94,23,152,-60,60,-60,62,-60,149,-60,148,-60,150,-60,151,-60,154,-60,153,-60,44,-60,59,-60,127,-60,130,-60,137,-60,146,-60,133,-60,144,-60,136,-60,134,-60,138,-60,142,-60,135,-60,131,-60,145,-60,143,-60,141,-60,41,-60,93,-60,125,-60,140,-60}));
    AddState(19,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,20,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(20,new State(new int[]{42,13,47,15,37,17,43,-61,45,-61,94,23,152,-61,60,-61,62,-61,149,-61,148,-61,150,-61,151,-61,154,39,153,-61,44,-61,59,-61,127,-61,130,-61,137,-61,146,-61,133,-61,144,-61,136,-61,134,-61,138,-61,142,-61,135,-61,131,-61,145,-61,143,-61,141,-61,41,-61,93,-61,125,-61,140,-61}));
    AddState(21,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,22,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(22,new State(new int[]{42,13,47,15,37,17,43,-62,45,-62,94,23,152,-62,60,-62,62,-62,149,-62,148,-62,150,-62,151,-62,154,39,153,-62,44,-62,59,-62,127,-62,130,-62,137,-62,146,-62,133,-62,144,-62,136,-62,134,-62,138,-62,142,-62,135,-62,131,-62,145,-62,143,-62,141,-62,41,-62,93,-62,125,-62,140,-62}));
    AddState(23,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,24,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(24,new State(-63));
    AddState(25,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,26,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(26,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,-64,60,-64,62,-64,149,-64,148,-64,150,-64,151,-64,154,39,153,41,44,-64,59,-64,127,-64,130,-64,137,-64,146,-64,133,-64,144,-64,136,-64,134,-64,138,-64,142,-64,135,-64,131,-64,145,-64,143,-64,141,-64,41,-64,93,-64,125,-64,140,-64}));
    AddState(27,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,28,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(28,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,-65,62,-65,149,-65,148,-65,150,-65,151,-65,154,39,153,41,44,-65,59,-65,127,-65,130,-65,137,-65,146,-65,133,-65,144,-65,136,-65,134,-65,138,-65,142,-65,135,-65,131,-65,145,-65,143,-65,141,-65,41,-65,93,-65,125,-65,140,-65}));
    AddState(29,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,30,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(30,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,-66,62,-66,149,-66,148,-66,150,-66,151,-66,154,39,153,41,44,-66,59,-66,127,-66,130,-66,137,-66,146,-66,133,-66,144,-66,136,-66,134,-66,138,-66,142,-66,135,-66,131,-66,145,-66,143,-66,141,-66,41,-66,93,-66,125,-66,140,-66}));
    AddState(31,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,32,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(32,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,-67,62,-67,149,-67,148,-67,150,-67,151,-67,154,39,153,41,44,-67,59,-67,127,-67,130,-67,137,-67,146,-67,133,-67,144,-67,136,-67,134,-67,138,-67,142,-67,135,-67,131,-67,145,-67,143,-67,141,-67,41,-67,93,-67,125,-67,140,-67}));
    AddState(33,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,34,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(34,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,-68,62,-68,149,-68,148,-68,150,-68,151,-68,154,39,153,41,44,-68,59,-68,127,-68,130,-68,137,-68,146,-68,133,-68,144,-68,136,-68,134,-68,138,-68,142,-68,135,-68,131,-68,145,-68,143,-68,141,-68,41,-68,93,-68,125,-68,140,-68}));
    AddState(35,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,36,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(36,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,-69,62,-69,149,-69,148,-69,150,-69,151,-69,154,39,153,41,44,-69,59,-69,127,-69,130,-69,137,-69,146,-69,133,-69,144,-69,136,-69,134,-69,138,-69,142,-69,135,-69,131,-69,145,-69,143,-69,141,-69,41,-69,93,-69,125,-69,140,-69}));
    AddState(37,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,38,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(38,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,-70,62,-70,149,-70,148,-70,150,-70,151,-70,154,39,153,41,44,-70,59,-70,127,-70,130,-70,137,-70,146,-70,133,-70,144,-70,136,-70,134,-70,138,-70,142,-70,135,-70,131,-70,145,-70,143,-70,141,-70,41,-70,93,-70,125,-70,140,-70}));
    AddState(39,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,40,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(40,new State(new int[]{42,-71,47,-71,37,-71,43,-71,45,-71,94,23,152,-71,60,-71,62,-71,149,-71,148,-71,150,-71,151,-71,154,-71,153,-71,44,-71,59,-71,127,-71,130,-71,137,-71,146,-71,133,-71,144,-71,136,-71,134,-71,138,-71,142,-71,135,-71,131,-71,145,-71,143,-71,141,-71,41,-71,93,-71,125,-71,140,-71}));
    AddState(41,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,42,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(42,new State(new int[]{42,13,47,15,37,17,43,-72,45,-72,94,23,152,-72,60,-72,62,-72,149,-72,148,-72,150,-72,151,-72,154,39,153,-72,44,-72,59,-72,127,-72,130,-72,137,-72,146,-72,133,-72,144,-72,136,-72,134,-72,138,-72,142,-72,135,-72,131,-72,145,-72,143,-72,141,-72,41,-72,93,-72,125,-72,140,-72}));
    AddState(43,new State(-49));
    AddState(44,new State(new int[]{129,45,46,46,42,-50,47,-50,37,-50,43,-50,45,-50,94,-50,152,-50,60,-50,62,-50,149,-50,148,-50,150,-50,151,-50,154,-50,153,-50,44,-50,59,-50,127,-50,130,-50,137,-50,146,-50,133,-50,144,-50,136,-50,134,-50,138,-50,142,-50,135,-50,131,-50,145,-50,143,-50,141,-50,41,-50,93,-50,125,-50,140,-50}));
    AddState(45,new State(-105));
    AddState(46,new State(new int[]{129,47}));
    AddState(47,new State(-106));
    AddState(48,new State(-107));
    AddState(49,new State(-51));
    AddState(50,new State(new int[]{42,-52,47,-52,37,-52,43,-52,45,-52,94,-52,152,-52,60,-52,62,-52,149,-52,148,-52,150,-52,151,-52,154,-52,153,-52,44,-52,59,-52,127,-52,130,-52,137,-52,146,-52,133,-52,144,-52,136,-52,134,-52,138,-52,142,-52,135,-52,131,-52,145,-52,143,-52,141,-52,41,-52,93,-52,125,-52,140,-52,91,-40,46,-40,58,-40,40,-40,123,-40,128,-40}));
    AddState(51,new State(-37));
    AddState(52,new State(-104));
    AddState(53,new State(new int[]{91,54,46,183,58,186,40,189,123,85,128,194},new int[]{-22,185,-28,193}));
    AddState(54,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,55,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(55,new State(new int[]{93,56}));
    AddState(56,new State(-38));
    AddState(57,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41,93,-48,137,-48,59,-48,127,-48,130,-48,146,-48,133,-48,144,-48,136,-48,134,-48,138,-48,142,-48,135,-48,131,-48,145,-48,143,-48,141,-48,140,-48,44,-48}));
    AddState(58,new State(new int[]{91,-41,46,-41,58,-41,40,-41,123,-41,128,-41,42,-55,47,-55,37,-55,43,-55,45,-55,94,-55,152,-55,60,-55,62,-55,149,-55,148,-55,150,-55,151,-55,154,-55,153,-55,44,-55,59,-55,127,-55,130,-55,137,-55,146,-55,133,-55,144,-55,136,-55,134,-55,138,-55,142,-55,135,-55,131,-55,145,-55,143,-55,141,-55,41,-55,93,-55,125,-55,140,-55}));
    AddState(59,new State(-53));
    AddState(60,new State(new int[]{40,61}));
    AddState(61,new State(new int[]{147,162,130,52,41,-24},new int[]{-12,62,-13,161,-1,163}));
    AddState(62,new State(new int[]{41,63}));
    AddState(63,new State(-4,new int[]{-19,64,-18,66}));
    AddState(64,new State(new int[]{131,65}));
    AddState(65,new State(-81));
    AddState(66,new State(new int[]{130,52,137,73,146,76,133,114,144,118,136,131,134,134,138,135,142,154,135,174,131,-7,145,-7,143,-7,141,-7},new int[]{-6,5,-3,8,-5,67,-1,51,-21,53,-20,72}));
    AddState(67,new State(new int[]{91,-40,46,-40,58,-40,40,-40,123,-40,128,-40,44,-36,61,-36},new int[]{-10,68}));
    AddState(68,new State(new int[]{44,69,61,-34}));
    AddState(69,new State(new int[]{130,52},new int[]{-5,70,-1,51,-21,53,-20,71}));
    AddState(70,new State(new int[]{44,-35,61,-35,91,-40,46,-40,58,-40,40,-40,123,-40,128,-40}));
    AddState(71,new State(-41));
    AddState(72,new State(new int[]{91,-41,46,-41,58,-41,40,-41,123,-41,128,-41,59,-9,127,-9,130,-9,137,-9,146,-9,133,-9,144,-9,136,-9,134,-9,138,-9,142,-9,135,-9,131,-9,145,-9,143,-9,141,-9}));
    AddState(73,new State(-4,new int[]{-19,74,-18,66}));
    AddState(74,new State(new int[]{131,75}));
    AddState(75,new State(-10));
    AddState(76,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,77,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(77,new State(new int[]{137,78}));
    AddState(78,new State(-4,new int[]{-19,79,-18,66}));
    AddState(79,new State(new int[]{131,80}));
    AddState(80,new State(-11));
    AddState(81,new State(-54));
    AddState(82,new State(new int[]{130,52},new int[]{-1,83}));
    AddState(83,new State(-86));
    AddState(84,new State(-56));
    AddState(85,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97,91,108,125,-91},new int[]{-29,86,-30,88,-31,89,-16,90,-2,44,-5,50,-1,99,-21,53,-20,58,-24,59,-37,81,-28,84,-33,102,-34,103,-36,104}));
    AddState(86,new State(new int[]{125,87}));
    AddState(87,new State(-87));
    AddState(88,new State(-88));
    AddState(89,new State(-90));
    AddState(90,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41,44,-99,125,-99},new int[]{-32,91}));
    AddState(91,new State(new int[]{44,92,125,-95}));
    AddState(92,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97,125,-94},new int[]{-16,93,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(93,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41,44,-98,125,-98}));
    AddState(94,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,95,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(95,new State(new int[]{41,96,42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41}));
    AddState(96,new State(-57));
    AddState(97,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,98,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(98,new State(-73));
    AddState(99,new State(new int[]{61,100,42,-37,47,-37,37,-37,43,-37,45,-37,94,-37,152,-37,60,-37,62,-37,149,-37,148,-37,150,-37,151,-37,154,-37,153,-37,44,-37,125,-37,91,-37,46,-37,58,-37,40,-37,123,-37,128,-37}));
    AddState(100,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,101,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(101,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41,44,-103,125,-103}));
    AddState(102,new State(-89));
    AddState(103,new State(-92));
    AddState(104,new State(-101,new int[]{-35,105}));
    AddState(105,new State(new int[]{44,106,125,-97}));
    AddState(106,new State(new int[]{91,108,130,52,125,-96},new int[]{-36,107,-1,113}));
    AddState(107,new State(-100));
    AddState(108,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,109,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(109,new State(new int[]{93,110,42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41}));
    AddState(110,new State(new int[]{61,111}));
    AddState(111,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-16,112,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(112,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41,44,-102,125,-102}));
    AddState(113,new State(new int[]{61,100}));
    AddState(114,new State(-4,new int[]{-19,115,-18,66}));
    AddState(115,new State(new int[]{145,116}));
    AddState(116,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,117,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(117,new State(-12));
    AddState(118,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,119,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(119,new State(new int[]{140,120}));
    AddState(120,new State(-4,new int[]{-19,121,-18,66}));
    AddState(121,new State(-28,new int[]{-26,122}));
    AddState(122,new State(new int[]{143,125,141,129,131,-30},new int[]{-27,123}));
    AddState(123,new State(new int[]{131,124}));
    AddState(124,new State(-13));
    AddState(125,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,126,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(126,new State(new int[]{140,127}));
    AddState(127,new State(-4,new int[]{-19,128,-18,66}));
    AddState(128,new State(-27));
    AddState(129,new State(-4,new int[]{-19,130,-18,66}));
    AddState(130,new State(-29));
    AddState(131,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97,59,-14,127,-14,137,-14,146,-14,133,-14,144,-14,136,-14,134,-14,138,-14,135,-14,131,-14,145,-14,143,-14,141,-14},new int[]{-4,132,-16,133,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(132,new State(new int[]{44,11,59,-15,127,-15,130,-15,137,-15,146,-15,133,-15,144,-15,136,-15,134,-15,138,-15,142,-15,135,-15,131,-15,145,-15,143,-15,141,-15}));
    AddState(133,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,152,25,60,27,62,29,149,31,148,33,150,35,151,37,154,39,153,41,44,-46,59,-46,127,-46,130,-46,137,-46,146,-46,133,-46,144,-46,136,-46,134,-46,138,-46,142,-46,135,-46,131,-46,145,-46,143,-46,141,-46,41,-46}));
    AddState(134,new State(-16));
    AddState(135,new State(new int[]{130,52},new int[]{-1,136}));
    AddState(136,new State(new int[]{61,137,44,147}));
    AddState(137,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,138,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(138,new State(new int[]{44,139}));
    AddState(139,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,140,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(140,new State(new int[]{44,145,137,-22},new int[]{-25,141}));
    AddState(141,new State(new int[]{137,142}));
    AddState(142,new State(-4,new int[]{-19,143,-18,66}));
    AddState(143,new State(new int[]{131,144}));
    AddState(144,new State(-17));
    AddState(145,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,146,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(146,new State(-21));
    AddState(147,new State(new int[]{130,52},new int[]{-1,148}));
    AddState(148,new State(new int[]{132,149}));
    AddState(149,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-17,150,-16,57,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(150,new State(new int[]{137,151}));
    AddState(151,new State(-4,new int[]{-19,152,-18,66}));
    AddState(152,new State(new int[]{131,153}));
    AddState(153,new State(-18));
    AddState(154,new State(new int[]{130,52},new int[]{-11,155,-1,169}));
    AddState(155,new State(new int[]{40,156}));
    AddState(156,new State(new int[]{147,162,130,52,41,-24},new int[]{-12,157,-13,161,-1,163}));
    AddState(157,new State(new int[]{41,158}));
    AddState(158,new State(-4,new int[]{-19,159,-18,66}));
    AddState(159,new State(new int[]{131,160}));
    AddState(160,new State(-19));
    AddState(161,new State(-23));
    AddState(162,new State(-82));
    AddState(163,new State(-44,new int[]{-15,164}));
    AddState(164,new State(new int[]{44,166,41,-85},new int[]{-14,165}));
    AddState(165,new State(-83));
    AddState(166,new State(new int[]{147,168,130,52},new int[]{-1,167}));
    AddState(167,new State(-43));
    AddState(168,new State(-84));
    AddState(169,new State(new int[]{46,170,58,172,40,-31}));
    AddState(170,new State(new int[]{130,52},new int[]{-1,171}));
    AddState(171,new State(-32));
    AddState(172,new State(new int[]{130,52},new int[]{-1,173}));
    AddState(173,new State(-33));
    AddState(174,new State(new int[]{130,52},new int[]{-7,175,-1,180}));
    AddState(175,new State(new int[]{61,178,59,-26,127,-26,130,-26,137,-26,146,-26,133,-26,144,-26,136,-26,134,-26,138,-26,142,-26,135,-26,131,-26,145,-26,143,-26,141,-26},new int[]{-8,176,-9,177}));
    AddState(176,new State(-20));
    AddState(177,new State(-25));
    AddState(178,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97},new int[]{-4,179,-16,133,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(179,new State(new int[]{44,11,59,-45,127,-45,130,-45,137,-45,146,-45,133,-45,144,-45,136,-45,134,-45,138,-45,142,-45,135,-45,131,-45,145,-45,143,-45,141,-45}));
    AddState(180,new State(-44,new int[]{-15,181}));
    AddState(181,new State(new int[]{44,182,61,-42,59,-42,127,-42,130,-42,137,-42,146,-42,133,-42,144,-42,136,-42,134,-42,138,-42,142,-42,135,-42,131,-42,145,-42,143,-42,141,-42}));
    AddState(182,new State(new int[]{130,52},new int[]{-1,167}));
    AddState(183,new State(new int[]{130,52},new int[]{-1,184}));
    AddState(184,new State(-39));
    AddState(185,new State(-74));
    AddState(186,new State(new int[]{130,52},new int[]{-1,187}));
    AddState(187,new State(new int[]{40,189,123,85,128,194},new int[]{-22,188,-28,193}));
    AddState(188,new State(-75));
    AddState(189,new State(new int[]{139,43,129,48,128,49,130,52,142,60,37,82,123,85,40,94,155,97,41,-80},new int[]{-23,190,-4,192,-16,133,-2,44,-5,50,-1,51,-21,53,-20,58,-24,59,-37,81,-28,84}));
    AddState(190,new State(new int[]{41,191}));
    AddState(191,new State(-76));
    AddState(192,new State(new int[]{44,11,41,-79}));
    AddState(193,new State(-77));
    AddState(194,new State(-78));

    Rule[] rules=new Rule[108];
    rules[1]=new Rule(-39, new int[]{-38,127});
    rules[2]=new Rule(-38, new int[]{-18,127});
    rules[3]=new Rule(-18, new int[]{-18,-6,-40});
    rules[4]=new Rule(-18, new int[]{});
    rules[5]=new Rule(-40, new int[]{59});
    rules[6]=new Rule(-40, new int[]{});
    rules[7]=new Rule(-19, new int[]{-18});
    rules[8]=new Rule(-6, new int[]{-3,61,-4});
    rules[9]=new Rule(-6, new int[]{-20});
    rules[10]=new Rule(-6, new int[]{137,-19,131});
    rules[11]=new Rule(-6, new int[]{146,-17,137,-19,131});
    rules[12]=new Rule(-6, new int[]{133,-19,145,-17});
    rules[13]=new Rule(-6, new int[]{144,-17,140,-19,-26,-27,131});
    rules[14]=new Rule(-6, new int[]{136});
    rules[15]=new Rule(-6, new int[]{136,-4});
    rules[16]=new Rule(-6, new int[]{134});
    rules[17]=new Rule(-6, new int[]{138,-1,61,-17,44,-17,-25,137,-19,131});
    rules[18]=new Rule(-6, new int[]{138,-1,44,-1,132,-17,137,-19,131});
    rules[19]=new Rule(-6, new int[]{142,-11,40,-12,41,-19,131});
    rules[20]=new Rule(-6, new int[]{135,-7,-8});
    rules[21]=new Rule(-25, new int[]{44,-17});
    rules[22]=new Rule(-25, new int[]{});
    rules[23]=new Rule(-12, new int[]{-13});
    rules[24]=new Rule(-12, new int[]{});
    rules[25]=new Rule(-8, new int[]{-9});
    rules[26]=new Rule(-8, new int[]{});
    rules[27]=new Rule(-26, new int[]{-26,143,-17,140,-19});
    rules[28]=new Rule(-26, new int[]{});
    rules[29]=new Rule(-27, new int[]{141,-19});
    rules[30]=new Rule(-27, new int[]{});
    rules[31]=new Rule(-11, new int[]{-1});
    rules[32]=new Rule(-11, new int[]{-1,46,-1});
    rules[33]=new Rule(-11, new int[]{-1,58,-1});
    rules[34]=new Rule(-3, new int[]{-5,-10});
    rules[35]=new Rule(-10, new int[]{-10,44,-5});
    rules[36]=new Rule(-10, new int[]{});
    rules[37]=new Rule(-5, new int[]{-1});
    rules[38]=new Rule(-5, new int[]{-21,91,-17,93});
    rules[39]=new Rule(-5, new int[]{-21,46,-1});
    rules[40]=new Rule(-21, new int[]{-5});
    rules[41]=new Rule(-21, new int[]{-20});
    rules[42]=new Rule(-7, new int[]{-1,-15});
    rules[43]=new Rule(-15, new int[]{-15,44,-1});
    rules[44]=new Rule(-15, new int[]{});
    rules[45]=new Rule(-9, new int[]{61,-4});
    rules[46]=new Rule(-4, new int[]{-16});
    rules[47]=new Rule(-4, new int[]{-4,44,-16});
    rules[48]=new Rule(-17, new int[]{-16});
    rules[49]=new Rule(-16, new int[]{139});
    rules[50]=new Rule(-16, new int[]{-2});
    rules[51]=new Rule(-16, new int[]{128});
    rules[52]=new Rule(-16, new int[]{-5});
    rules[53]=new Rule(-16, new int[]{-24});
    rules[54]=new Rule(-16, new int[]{-37});
    rules[55]=new Rule(-16, new int[]{-20});
    rules[56]=new Rule(-16, new int[]{-28});
    rules[57]=new Rule(-16, new int[]{40,-16,41});
    rules[58]=new Rule(-16, new int[]{-16,42,-16});
    rules[59]=new Rule(-16, new int[]{-16,47,-16});
    rules[60]=new Rule(-16, new int[]{-16,37,-16});
    rules[61]=new Rule(-16, new int[]{-16,43,-16});
    rules[62]=new Rule(-16, new int[]{-16,45,-16});
    rules[63]=new Rule(-16, new int[]{-16,94,-16});
    rules[64]=new Rule(-16, new int[]{-16,152,-16});
    rules[65]=new Rule(-16, new int[]{-16,60,-16});
    rules[66]=new Rule(-16, new int[]{-16,62,-16});
    rules[67]=new Rule(-16, new int[]{-16,149,-16});
    rules[68]=new Rule(-16, new int[]{-16,148,-16});
    rules[69]=new Rule(-16, new int[]{-16,150,-16});
    rules[70]=new Rule(-16, new int[]{-16,151,-16});
    rules[71]=new Rule(-16, new int[]{-16,154,-16});
    rules[72]=new Rule(-16, new int[]{-16,153,-16});
    rules[73]=new Rule(-16, new int[]{155,-16});
    rules[74]=new Rule(-20, new int[]{-21,-22});
    rules[75]=new Rule(-20, new int[]{-21,58,-1,-22});
    rules[76]=new Rule(-22, new int[]{40,-23,41});
    rules[77]=new Rule(-22, new int[]{-28});
    rules[78]=new Rule(-22, new int[]{128});
    rules[79]=new Rule(-23, new int[]{-4});
    rules[80]=new Rule(-23, new int[]{});
    rules[81]=new Rule(-24, new int[]{142,40,-12,41,-19,131});
    rules[82]=new Rule(-13, new int[]{147});
    rules[83]=new Rule(-13, new int[]{-1,-15,-14});
    rules[84]=new Rule(-14, new int[]{44,147});
    rules[85]=new Rule(-14, new int[]{});
    rules[86]=new Rule(-37, new int[]{37,-1});
    rules[87]=new Rule(-28, new int[]{123,-29,125});
    rules[88]=new Rule(-29, new int[]{-30});
    rules[89]=new Rule(-29, new int[]{-33});
    rules[90]=new Rule(-30, new int[]{-31});
    rules[91]=new Rule(-30, new int[]{});
    rules[92]=new Rule(-33, new int[]{-34});
    rules[93]=new Rule(-33, new int[]{});
    rules[94]=new Rule(-31, new int[]{-16,-32,44});
    rules[95]=new Rule(-31, new int[]{-16,-32});
    rules[96]=new Rule(-34, new int[]{-36,-35,44});
    rules[97]=new Rule(-34, new int[]{-36,-35});
    rules[98]=new Rule(-32, new int[]{-32,44,-16});
    rules[99]=new Rule(-32, new int[]{});
    rules[100]=new Rule(-35, new int[]{-35,44,-36});
    rules[101]=new Rule(-35, new int[]{});
    rules[102]=new Rule(-36, new int[]{91,-16,93,61,-16});
    rules[103]=new Rule(-36, new int[]{-1,61,-16});
    rules[104]=new Rule(-1, new int[]{130});
    rules[105]=new Rule(-2, new int[]{-2,129});
    rules[106]=new Rule(-2, new int[]{-2,46,129});
    rules[107]=new Rule(-2, new int[]{129});
    this.InitRules(rules);

    this.InitNonTerminals(new string[] {"", "NAME", "NUMBER", "VARLIST1", "EXPLIST1", 
      "VAR", "STAT", "DECLIST", "INIT_OPT", "INIT", "VAR_LIST", "FUNCNAME", "PL_OPT", 
      "PARLIST1", "SMTH_OPT", "NAME_LIST", "EXP", "EXP1", "CHUNK", "BLOCK", "FUNCTION_CALL", 
      "VARORFUNC", "ARGS", "EXP_LIST_OPT", "FUNCTION", "EXPTEMP", "ELSEIF_LIST", 
      "ELSE_LIST", "TABLE_CONSTRUCTOR", "FIELDLIST", "LFIELDLIST", "LFIELDLIST1", 
      "LST", "FFIELDLIST", "FFIELDLIST1", "FST", "FFIELD", "UPVALUE", "PROGRAM", 
      "$accept", "COMMA", });
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // PROGRAM -> CHUNK, EOF
{m_tree.AppendChild(-1, m_tree.Root, ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 3: // CHUNK -> CHUNK, STAT, COMMA
{ CurrentSemanticValue.TN = m_tree.AppendChild(ASTree.CHUNK, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-2].TN); }
        break;
      case 4: // CHUNK -> /* empty */
{CurrentSemanticValue.TN = null;}
        break;
      case 7: // BLOCK -> CHUNK
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 8: // STAT -> VARLIST1, '=', EXPLIST1
{ CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.ASSIGN, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN); }
        break;
      case 9: // STAT -> FUNCTION_CALL
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 10: // STAT -> doT, BLOCK, end
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.DO, ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 11: // STAT -> whileT, EXP1, doT, BLOCK, end
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.WHILE, ValueStack[ValueStack.Depth-4].TN, ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 12: // STAT -> repeatT, BLOCK, untilT, EXP1
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.REPEAT, ValueStack[ValueStack.Depth-3].TN, m_tree.CreateNode(ASTree.UNTIL_COND, ValueStack[ValueStack.Depth-1].TN));}
        break;
      case 13: // STAT -> ifT, EXP1, then, BLOCK, ELSEIF_LIST, ELSE_LIST, end
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.IF, m_tree.CreateNode(ASTree.IF_COND, ValueStack[ValueStack.Depth-6].TN), ValueStack[ValueStack.Depth-4].TN, m_tree.CreateNode(ASTree.ELSEIF_LIST, ValueStack[ValueStack.Depth-3].TNL), ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 14: // STAT -> returnT
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.RETURN);}
        break;
      case 15: // STAT -> returnT, EXPLIST1
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.RETURN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 16: // STAT -> breakT
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.BREAK, "break");}
        break;
      case 17: // STAT -> forT, NAME, '=', EXP1, ',', EXP1, EXPTEMP, doT, BLOCK, end
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FOR, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-9].s), ValueStack[ValueStack.Depth-7].TN, ValueStack[ValueStack.Depth-5].TN, ValueStack[ValueStack.Depth-4].TN, ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 18: // STAT -> forT, NAME, ',', NAME, inT, EXP1, doT, BLOCK, end
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FOR_IN, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-8].s), m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-6].s), ValueStack[ValueStack.Depth-4].TN, ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 19: // STAT -> functionT, FUNCNAME, '(', PL_OPT, ')', BLOCK, end
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FUNCTION, ValueStack[ValueStack.Depth-6].TN, ValueStack[ValueStack.Depth-4].TN, ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 20: // STAT -> local, DECLIST, INIT_OPT
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.ASSIGN_LOCAL, ValueStack[ValueStack.Depth-2].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 21: // EXPTEMP -> ',', EXP1
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.STEP, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 22: // EXPTEMP -> /* empty */
{CurrentSemanticValue.TN = null;}
        break;
      case 23: // PL_OPT -> PARLIST1
{ CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 24: // PL_OPT -> /* empty */
{CurrentSemanticValue.TN = null;}
        break;
      case 25: // INIT_OPT -> INIT
{ CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 26: // INIT_OPT -> /* empty */
{CurrentSemanticValue.TN = null;}
        break;
      case 27: // ELSEIF_LIST -> ELSEIF_LIST, elseifT, EXP1, then, BLOCK
{CurrentSemanticValue.TNL = m_tree.AppendNodeList(ValueStack[ValueStack.Depth-5].TNL, m_tree.CreateNode(ASTree.IF_COND, ValueStack[ValueStack.Depth-3].TN), ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 28: // ELSEIF_LIST -> /* empty */
{CurrentSemanticValue.TNL = null;}
        break;
      case 29: // ELSE_LIST -> elseT, BLOCK
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.ELSE, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 30: // ELSE_LIST -> /* empty */
{CurrentSemanticValue.TN = null;}
        break;
      case 31: // FUNCNAME -> NAME
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FUNCNAME, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-1].s));}
        break;
      case 32: // FUNCNAME -> NAME, '.', NAME
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FUNCNAME_UP, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-3].s), m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-1].s));}
        break;
      case 33: // FUNCNAME -> NAME, ':', NAME
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FUNCNAME_IMPLICIT, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-3].s), m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-1].s));}
        break;
      case 34: // VARLIST1 -> VAR, VAR_LIST
{ TreeNode<Node> n = m_tree.CreateNode(ASTree.VARLIST, ValueStack[ValueStack.Depth-2].TN); CurrentSemanticValue.TN = m_tree.AppendChild(n, ValueStack[ValueStack.Depth-1].TNL);}
        break;
      case 35: // VAR_LIST -> VAR_LIST, ',', VAR
{ CurrentSemanticValue.TNL = m_tree.AppendNodeList(ValueStack[ValueStack.Depth-3].TNL, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 36: // VAR_LIST -> /* empty */
{CurrentSemanticValue.TNL = null;}
        break;
      case 37: // VAR -> NAME
{ CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-1].s);}
        break;
      case 38: // VAR -> VARORFUNC, '[', EXP1, ']'
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.Id_Up, ValueStack[ValueStack.Depth-4].TN, ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 39: // VAR -> VARORFUNC, '.', NAME
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.Id_Up, ValueStack[ValueStack.Depth-3].TN, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-1].s));}
        break;
      case 40: // VARORFUNC -> VAR
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 41: // VARORFUNC -> FUNCTION_CALL
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 42: // DECLIST -> NAME, NAME_LIST
{ TreeNode<Node> n = m_tree.CreateNode(ASTree.VARLIST, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-2].s)); CurrentSemanticValue.TN = m_tree.AppendChild(n, ValueStack[ValueStack.Depth-1].TNL);}
        break;
      case 43: // NAME_LIST -> NAME_LIST, ',', NAME
{CurrentSemanticValue.TNL = m_tree.AppendNodeList(ValueStack[ValueStack.Depth-3].TNL, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-1].s));}
        break;
      case 44: // NAME_LIST -> /* empty */
{CurrentSemanticValue.TNL = null;}
        break;
      case 45: // INIT -> '=', EXPLIST1
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 46: // EXPLIST1 -> EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.EXPLIST, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 47: // EXPLIST1 -> EXPLIST1, ',', EXP
{CurrentSemanticValue.TN = m_tree.AppendChild(ASTree.EXPLIST, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN) ;}
        break;
      case 48: // EXP1 -> EXP
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 49: // EXP -> nil
{CurrentSemanticValue.TN = null;}
        break;
      case 50: // EXP -> NUMBER
{ CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.NUMBER, ValueStack[ValueStack.Depth-1].d);}
        break;
      case 51: // EXP -> str
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.STRING, ValueStack[ValueStack.Depth-1].s);}
        break;
      case 52: // EXP -> VAR
{ CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN ;}
        break;
      case 53: // EXP -> FUNCTION
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 54: // EXP -> UPVALUE
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 55: // EXP -> FUNCTION_CALL
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 56: // EXP -> TABLE_CONSTRUCTOR
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 57: // EXP -> '(', EXP, ')'
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-2].TN;}
        break;
      case 58: // EXP -> EXP, '*', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.OperatorMul, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 59: // EXP -> EXP, '/', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.OperatorDiv, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 60: // EXP -> EXP, '%', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.OperatorMod, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 61: // EXP -> EXP, '+', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.OperatorPlus, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 62: // EXP -> EXP, '-', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.OperatorMinus, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 63: // EXP -> EXP, '^', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.OperatorStepen, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 64: // EXP -> EXP, doublePoint, EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.OperatorConcatenacii, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 65: // EXP -> EXP, '<', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.LESS, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 66: // EXP -> EXP, '>', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.GREATER, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 67: // EXP -> EXP, le, EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.LESS_EQUAL, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 68: // EXP -> EXP, ge, EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.GREATER_EQUAL, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 69: // EXP -> EXP, e, EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.EQUAL, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 70: // EXP -> EXP, ne, EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.NOT_EQUAL, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 71: // EXP -> EXP, and, EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.AND, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 72: // EXP -> EXP, or, EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.OR, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 73: // EXP -> not, EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.NOT, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 74: // FUNCTION_CALL -> VARORFUNC, ARGS
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FUNCTION_CALL, ValueStack[ValueStack.Depth-2].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 75: // FUNCTION_CALL -> VARORFUNC, ':', NAME, ARGS
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FUNCTION_CALL_IMPLICIT, ValueStack[ValueStack.Depth-4].TN, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-2].s), ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 76: // ARGS -> '(', EXP_LIST_OPT, ')'
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.ARGS, ValueStack[ValueStack.Depth-2].TN);}
        break;
      case 77: // ARGS -> TABLE_CONSTRUCTOR
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 78: // ARGS -> str
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.ARGS, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-1].s));}
        break;
      case 79: // EXP_LIST_OPT -> EXPLIST1
{CurrentSemanticValue.TN = ValueStack[ValueStack.Depth-1].TN;}
        break;
      case 80: // EXP_LIST_OPT -> /* empty */
{CurrentSemanticValue.TN = null;}
        break;
      case 81: // FUNCTION -> functionT, '(', PL_OPT, ')', BLOCK, end
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.FUNCTION, ValueStack[ValueStack.Depth-4].TN, ValueStack[ValueStack.Depth-2].TN) ;}
        break;
      case 82: // PARLIST1 -> SMTH
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.PARLIST, m_tree.CreateNode(ASTree.Id, "..."));}
        break;
      case 83: // PARLIST1 -> NAME, NAME_LIST, SMTH_OPT
{ TreeNode<Node> n = m_tree.CreateNode(ASTree.PARLIST, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-3].s)); n = m_tree.AppendChild(n, ValueStack[ValueStack.Depth-2].TNL); CurrentSemanticValue.TN = m_tree.AppendChild(ASTree.PARLIST, n, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 84: // SMTH_OPT -> ',', SMTH
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.Id, "...");}
        break;
      case 85: // SMTH_OPT -> /* empty */
{CurrentSemanticValue.TN = null;}
        break;
      case 86: // UPVALUE -> '%', NAME
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.UPVALUE, ValueStack[ValueStack.Depth-1].s);}
        break;
      case 87: // TABLE_CONSTRUCTOR -> '{', FIELDLIST, '}'
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.TABLE_CONSTRUCTOR, ValueStack[ValueStack.Depth-2].TNL); }
        break;
      case 88: // FIELDLIST -> LFIELDLIST
{CurrentSemanticValue.TNL = ValueStack[ValueStack.Depth-1].TNL;}
        break;
      case 89: // FIELDLIST -> FFIELDLIST
{CurrentSemanticValue.TNL = ValueStack[ValueStack.Depth-1].TNL;}
        break;
      case 90: // LFIELDLIST -> LFIELDLIST1
{CurrentSemanticValue.TNL = ValueStack[ValueStack.Depth-1].TNL;}
        break;
      case 91: // LFIELDLIST -> /* empty */
{CurrentSemanticValue.TNL = null;}
        break;
      case 92: // FFIELDLIST -> FFIELDLIST1
{CurrentSemanticValue.TNL = ValueStack[ValueStack.Depth-1].TNL;}
        break;
      case 93: // FFIELDLIST -> /* empty */
{CurrentSemanticValue.TNL = null;}
        break;
      case 94: // LFIELDLIST1 -> EXP, LST, ','
{CurrentSemanticValue.TNL = m_tree.CreateNodeList(ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-2].TNL);}
        break;
      case 95: // LFIELDLIST1 -> EXP, LST
{CurrentSemanticValue.TNL = m_tree.CreateNodeList(ValueStack[ValueStack.Depth-2].TN, ValueStack[ValueStack.Depth-1].TNL) ;}
        break;
      case 96: // FFIELDLIST1 -> FFIELD, FST, ','
{CurrentSemanticValue.TNL = m_tree.CreateNodeList(ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-2].TNL);}
        break;
      case 97: // FFIELDLIST1 -> FFIELD, FST
{CurrentSemanticValue.TNL = m_tree.CreateNodeList(ValueStack[ValueStack.Depth-2].TN, ValueStack[ValueStack.Depth-1].TNL);}
        break;
      case 98: // LST -> LST, ',', EXP
{CurrentSemanticValue.TNL = m_tree.AppendNodeList(ValueStack[ValueStack.Depth-3].TNL, ValueStack[ValueStack.Depth-1].TN) ;}
        break;
      case 99: // LST -> /* empty */
{CurrentSemanticValue.TNL = null;}
        break;
      case 100: // FST -> FST, ',', FFIELD
{CurrentSemanticValue.TNL = m_tree.AppendNodeList(ValueStack[ValueStack.Depth-3].TNL, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 101: // FST -> /* empty */
{CurrentSemanticValue.TNL = null;}
        break;
      case 102: // FFIELD -> '[', EXP, ']', '=', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.ASSIGN, ValueStack[ValueStack.Depth-4].TN, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 103: // FFIELD -> NAME, '=', EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.ASSIGN, m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-3].s), ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 104: // NAME -> identifer
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 105: // NUMBER -> NUMBER, digit
{ if (_baseNumber == 0) {CurrentSemanticValue.d = ValueStack[ValueStack.Depth-2].d * 10 + ValueStack[ValueStack.Depth-1].i;} else {_baseNumber*=0.1; CurrentSemanticValue.d = ValueStack[ValueStack.Depth-2].d + ValueStack[ValueStack.Depth-1].i * _baseNumber; } }
        break;
      case 106: // NUMBER -> NUMBER, '.', digit
{ if (_baseNumber != 0) {YYError();} else {_baseNumber = 0.1;CurrentSemanticValue.d = ValueStack[ValueStack.Depth-3].d + ValueStack[ValueStack.Depth-1].i * _baseNumber;}}
        break;
      case 107: // NUMBER -> digit
{ CurrentSemanticValue.d = ValueStack[ValueStack.Depth-1].i; _baseNumber = 0; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public Parser(ASTree tree) : base(null) { m_tree = tree;}
}
}
