// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  AVATAR-èä
// DateTime: 12.12.2011 15:35:09
// UserName: Avatar
// Input file <Grammar_LUA.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using LUA_Interpreter;

namespace LuaSyntax
{
public enum Tokens {error=126,
    EOF=127,str=128,digit=129,identifer=130,end=131,inT=132,
    repeatT=133,breakT=134,falseT=135,local=136,returnT=137,doT=138,
    forT=139,nil=140,then=141,elseT=142,functionT=143,trueT=144,
    elseifT=145,ifT=146,untilT=147,whileT=148,SMTH=149,ge=150,
    le=151,e=152,ne=153,doublePoint=154,or=155,and=156,
    not=157,UMINUS=158};

public struct ValueType
{
	public TreeNode<Node> TN;
	public TreeNodeList<Node> TNL;
	public string s;	
	public int i;
	public double d;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
	IdentiferTable m_table;
	double _baseNumber = 0;
	ASTree m_tree;
#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

  protected override void Initialize()
  {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

    this.InitStateTable(215);
    AddState(0,new State(-4,new int[]{-17,1,-19,3}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{127,4,130,52,138,73,148,76,133,124,146,130,137,145,134,148,139,149,143,172,136,194},new int[]{-6,5,-3,8,-5,67,-1,51,-40,53,-22,72}));
    AddState(4,new State(-2));
    AddState(5,new State(new int[]{59,7,127,-6,130,-6,138,-6,148,-6,133,-6,146,-6,137,-6,134,-6,139,-6,143,-6,136,-6,131,-6,147,-6,145,-6,142,-6},new int[]{-20,6}));
    AddState(6,new State(-3));
    AddState(7,new State(-5));
    AddState(8,new State(new int[]{61,9}));
    AddState(9,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-4,10,-16,147,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(10,new State(new int[]{44,11,59,-8,127,-8,130,-8,138,-8,148,-8,133,-8,146,-8,137,-8,134,-8,139,-8,143,-8,136,-8,131,-8,147,-8,145,-8,142,-8}));
    AddState(11,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,12,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(12,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41,44,-60,59,-60,127,-60,130,-60,138,-60,148,-60,133,-60,146,-60,137,-60,134,-60,139,-60,143,-60,136,-60,131,-60,147,-60,145,-60,142,-60,41,-60}));
    AddState(13,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,14,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(14,new State(new int[]{42,-71,47,-71,37,-71,43,-71,45,-71,94,23,154,-71,60,-71,62,-71,151,-71,150,-71,152,-71,153,-71,156,-71,155,-71,44,-71,59,-71,127,-71,130,-71,138,-71,148,-71,133,-71,146,-71,137,-71,134,-71,139,-71,143,-71,136,-71,131,-71,147,-71,145,-71,142,-71,41,-71,93,-71,125,-71,141,-71}));
    AddState(15,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,16,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(16,new State(new int[]{42,-72,47,-72,37,-72,43,-72,45,-72,94,23,154,-72,60,-72,62,-72,151,-72,150,-72,152,-72,153,-72,156,-72,155,-72,44,-72,59,-72,127,-72,130,-72,138,-72,148,-72,133,-72,146,-72,137,-72,134,-72,139,-72,143,-72,136,-72,131,-72,147,-72,145,-72,142,-72,41,-72,93,-72,125,-72,141,-72}));
    AddState(17,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,18,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(18,new State(new int[]{42,-73,47,-73,37,-73,43,-73,45,-73,94,23,154,-73,60,-73,62,-73,151,-73,150,-73,152,-73,153,-73,156,-73,155,-73,44,-73,59,-73,127,-73,130,-73,138,-73,148,-73,133,-73,146,-73,137,-73,134,-73,139,-73,143,-73,136,-73,131,-73,147,-73,145,-73,142,-73,41,-73,93,-73,125,-73,141,-73}));
    AddState(19,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,20,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(20,new State(new int[]{42,13,47,15,37,17,43,-74,45,-74,94,23,154,-74,60,-74,62,-74,151,-74,150,-74,152,-74,153,-74,156,39,155,-74,44,-74,59,-74,127,-74,130,-74,138,-74,148,-74,133,-74,146,-74,137,-74,134,-74,139,-74,143,-74,136,-74,131,-74,147,-74,145,-74,142,-74,41,-74,93,-74,125,-74,141,-74}));
    AddState(21,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,22,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(22,new State(new int[]{42,13,47,15,37,17,43,-75,45,-75,94,23,154,-75,60,-75,62,-75,151,-75,150,-75,152,-75,153,-75,156,39,155,-75,44,-75,59,-75,127,-75,130,-75,138,-75,148,-75,133,-75,146,-75,137,-75,134,-75,139,-75,143,-75,136,-75,131,-75,147,-75,145,-75,142,-75,41,-75,93,-75,125,-75,141,-75}));
    AddState(23,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,24,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(24,new State(-76));
    AddState(25,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,26,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(26,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,-77,60,-77,62,-77,151,-77,150,-77,152,-77,153,-77,156,39,155,41,44,-77,59,-77,127,-77,130,-77,138,-77,148,-77,133,-77,146,-77,137,-77,134,-77,139,-77,143,-77,136,-77,131,-77,147,-77,145,-77,142,-77,41,-77,93,-77,125,-77,141,-77}));
    AddState(27,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,28,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(28,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,-78,62,-78,151,-78,150,-78,152,-78,153,-78,156,39,155,41,44,-78,59,-78,127,-78,130,-78,138,-78,148,-78,133,-78,146,-78,137,-78,134,-78,139,-78,143,-78,136,-78,131,-78,147,-78,145,-78,142,-78,41,-78,93,-78,125,-78,141,-78}));
    AddState(29,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,30,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(30,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,-79,62,-79,151,-79,150,-79,152,-79,153,-79,156,39,155,41,44,-79,59,-79,127,-79,130,-79,138,-79,148,-79,133,-79,146,-79,137,-79,134,-79,139,-79,143,-79,136,-79,131,-79,147,-79,145,-79,142,-79,41,-79,93,-79,125,-79,141,-79}));
    AddState(31,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,32,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(32,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,-80,62,-80,151,-80,150,-80,152,-80,153,-80,156,39,155,41,44,-80,59,-80,127,-80,130,-80,138,-80,148,-80,133,-80,146,-80,137,-80,134,-80,139,-80,143,-80,136,-80,131,-80,147,-80,145,-80,142,-80,41,-80,93,-80,125,-80,141,-80}));
    AddState(33,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,34,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(34,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,-81,62,-81,151,-81,150,-81,152,-81,153,-81,156,39,155,41,44,-81,59,-81,127,-81,130,-81,138,-81,148,-81,133,-81,146,-81,137,-81,134,-81,139,-81,143,-81,136,-81,131,-81,147,-81,145,-81,142,-81,41,-81,93,-81,125,-81,141,-81}));
    AddState(35,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,36,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(36,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,-82,62,-82,151,-82,150,-82,152,-82,153,-82,156,39,155,41,44,-82,59,-82,127,-82,130,-82,138,-82,148,-82,133,-82,146,-82,137,-82,134,-82,139,-82,143,-82,136,-82,131,-82,147,-82,145,-82,142,-82,41,-82,93,-82,125,-82,141,-82}));
    AddState(37,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,38,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(38,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,-83,62,-83,151,-83,150,-83,152,-83,153,-83,156,39,155,41,44,-83,59,-83,127,-83,130,-83,138,-83,148,-83,133,-83,146,-83,137,-83,134,-83,139,-83,143,-83,136,-83,131,-83,147,-83,145,-83,142,-83,41,-83,93,-83,125,-83,141,-83}));
    AddState(39,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,40,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(40,new State(new int[]{42,-84,47,-84,37,-84,43,-84,45,-84,94,23,154,-84,60,-84,62,-84,151,-84,150,-84,152,-84,153,-84,156,-84,155,-84,44,-84,59,-84,127,-84,130,-84,138,-84,148,-84,133,-84,146,-84,137,-84,134,-84,139,-84,143,-84,136,-84,131,-84,147,-84,145,-84,142,-84,41,-84,93,-84,125,-84,141,-84}));
    AddState(41,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,42,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(42,new State(new int[]{42,13,47,15,37,17,43,-85,45,-85,94,23,154,-85,60,-85,62,-85,151,-85,150,-85,152,-85,153,-85,156,39,155,-85,44,-85,59,-85,127,-85,130,-85,138,-85,148,-85,133,-85,146,-85,137,-85,134,-85,139,-85,143,-85,136,-85,131,-85,147,-85,145,-85,142,-85,41,-85,93,-85,125,-85,141,-85}));
    AddState(43,new State(-62));
    AddState(44,new State(new int[]{129,45,46,46,42,-63,47,-63,37,-63,43,-63,45,-63,94,-63,154,-63,60,-63,62,-63,151,-63,150,-63,152,-63,153,-63,156,-63,155,-63,44,-63,59,-63,127,-63,130,-63,138,-63,148,-63,133,-63,146,-63,137,-63,134,-63,139,-63,143,-63,136,-63,131,-63,147,-63,145,-63,142,-63,41,-63,93,-63,125,-63,141,-63}));
    AddState(45,new State(-122));
    AddState(46,new State(new int[]{129,47}));
    AddState(47,new State(-123));
    AddState(48,new State(-124));
    AddState(49,new State(-64));
    AddState(50,new State(new int[]{42,-65,47,-65,37,-65,43,-65,45,-65,94,-65,154,-65,60,-65,62,-65,151,-65,150,-65,152,-65,153,-65,156,-65,155,-65,44,-65,59,-65,127,-65,130,-65,138,-65,148,-65,133,-65,146,-65,137,-65,134,-65,139,-65,143,-65,136,-65,131,-65,147,-65,145,-65,142,-65,41,-65,93,-65,125,-65,141,-65,91,-53,46,-53,58,-53,40,-53,123,-53,128,-53}));
    AddState(51,new State(-50));
    AddState(52,new State(-121));
    AddState(53,new State(new int[]{91,54,46,203,58,206,40,209,123,87,128,214},new int[]{-44,205,-43,213}));
    AddState(54,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,55,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(55,new State(new int[]{93,56}));
    AddState(56,new State(-51));
    AddState(57,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41,93,-61,138,-61,59,-61,127,-61,130,-61,148,-61,133,-61,146,-61,137,-61,134,-61,139,-61,143,-61,136,-61,131,-61,147,-61,145,-61,142,-61,141,-61,44,-61}));
    AddState(58,new State(new int[]{91,-54,46,-54,58,-54,40,-54,123,-54,128,-54,42,-68,47,-68,37,-68,43,-68,45,-68,94,-68,154,-68,60,-68,62,-68,151,-68,150,-68,152,-68,153,-68,156,-68,155,-68,44,-68,59,-68,127,-68,130,-68,138,-68,148,-68,133,-68,146,-68,137,-68,134,-68,139,-68,143,-68,136,-68,131,-68,147,-68,145,-68,142,-68,41,-68,93,-68,125,-68,141,-68}));
    AddState(59,new State(-66));
    AddState(60,new State(new int[]{40,61}));
    AddState(61,new State(new int[]{149,182,130,52,41,-37},new int[]{-12,62,-13,181,-1,183}));
    AddState(62,new State(new int[]{41,63}));
    AddState(63,new State(-4,new int[]{-21,64,-19,66}));
    AddState(64,new State(new int[]{131,65}));
    AddState(65,new State(-96));
    AddState(66,new State(new int[]{130,52,138,73,148,76,133,124,146,130,137,145,134,148,139,149,143,172,136,194,131,-7,147,-7,145,-7,142,-7},new int[]{-6,5,-3,8,-5,67,-1,51,-40,53,-22,72}));
    AddState(67,new State(new int[]{91,-53,46,-53,58,-53,40,-53,123,-53,128,-53,44,-49,61,-49},new int[]{-10,68}));
    AddState(68,new State(new int[]{44,69,61,-47}));
    AddState(69,new State(new int[]{130,52},new int[]{-5,70,-1,51,-40,53,-22,71}));
    AddState(70,new State(new int[]{44,-48,61,-48,91,-53,46,-53,58,-53,40,-53,123,-53,128,-53}));
    AddState(71,new State(-54));
    AddState(72,new State(new int[]{91,-54,46,-54,58,-54,40,-54,123,-54,128,-54,59,-9,127,-9,130,-9,138,-9,148,-9,133,-9,146,-9,137,-9,134,-9,139,-9,143,-9,136,-9,131,-9,147,-9,145,-9,142,-9}));
    AddState(73,new State(-10,new int[]{-23,74}));
    AddState(74,new State(new int[]{131,75}));
    AddState(75,new State(-11));
    AddState(76,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,77,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(77,new State(new int[]{138,78}));
    AddState(78,new State(-12,new int[]{-25,79}));
    AddState(79,new State(-4,new int[]{-21,80,-19,66}));
    AddState(80,new State(-13,new int[]{-26,81}));
    AddState(81,new State(new int[]{131,82}));
    AddState(82,new State(-14));
    AddState(83,new State(-67));
    AddState(84,new State(new int[]{130,52},new int[]{-1,85}));
    AddState(85,new State(-101));
    AddState(86,new State(-69));
    AddState(87,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110,91,98,59,-108,125,-108},new int[]{-46,88,-47,90,-49,115,-16,116,-2,44,-5,50,-1,120,-40,53,-22,58,-41,59,-42,83,-43,86,-48,121,-50,93,-52,94}));
    AddState(88,new State(new int[]{125,89}));
    AddState(89,new State(-102));
    AddState(90,new State(new int[]{59,91,125,-103}));
    AddState(91,new State(new int[]{91,98,130,52,125,-110},new int[]{-48,92,-50,93,-52,94,-1,112}));
    AddState(92,new State(-105));
    AddState(93,new State(-109));
    AddState(94,new State(-118,new int[]{-53,95}));
    AddState(95,new State(new int[]{44,96,59,-114,125,-114}));
    AddState(96,new State(new int[]{91,98,130,52,59,-113,125,-113},new int[]{-52,97,-1,112}));
    AddState(97,new State(-117));
    AddState(98,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,99,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(99,new State(new int[]{93,100,42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41}));
    AddState(100,new State(new int[]{61,101}));
    AddState(101,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,102,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(102,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41,44,-119,59,-119,125,-119}));
    AddState(103,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,104,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(104,new State(new int[]{41,105,42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41}));
    AddState(105,new State(-70));
    AddState(106,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,107,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(107,new State(-86));
    AddState(108,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,109,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(109,new State(-87));
    AddState(110,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,111,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(111,new State(-88));
    AddState(112,new State(new int[]{61,113}));
    AddState(113,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-16,114,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(114,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41,44,-120,59,-120,125,-120}));
    AddState(115,new State(-107));
    AddState(116,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41,44,-116,59,-116,125,-116},new int[]{-51,117}));
    AddState(117,new State(new int[]{44,118,59,-112,125,-112}));
    AddState(118,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110,59,-111,125,-111},new int[]{-16,119,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(119,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41,44,-115,59,-115,125,-115}));
    AddState(120,new State(new int[]{61,113,42,-50,47,-50,37,-50,43,-50,45,-50,94,-50,154,-50,60,-50,62,-50,151,-50,150,-50,152,-50,153,-50,156,-50,155,-50,44,-50,59,-50,125,-50,91,-50,46,-50,58,-50,40,-50,123,-50,128,-50}));
    AddState(121,new State(new int[]{59,122,125,-104}));
    AddState(122,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110,125,-108},new int[]{-47,123,-49,115,-16,116,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(123,new State(-106));
    AddState(124,new State(-15,new int[]{-27,125}));
    AddState(125,new State(-4,new int[]{-21,126,-19,66}));
    AddState(126,new State(-16,new int[]{-28,127}));
    AddState(127,new State(new int[]{147,128}));
    AddState(128,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,129,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(129,new State(-17));
    AddState(130,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,131,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(131,new State(new int[]{141,132}));
    AddState(132,new State(-18,new int[]{-29,133}));
    AddState(133,new State(-4,new int[]{-21,134,-19,66}));
    AddState(134,new State(-19,new int[]{-30,135}));
    AddState(135,new State(-41,new int[]{-31,136}));
    AddState(136,new State(new int[]{145,139,142,143,131,-43},new int[]{-32,137}));
    AddState(137,new State(new int[]{131,138}));
    AddState(138,new State(-20));
    AddState(139,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,140,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(140,new State(new int[]{141,141}));
    AddState(141,new State(-4,new int[]{-21,142,-19,66}));
    AddState(142,new State(-40));
    AddState(143,new State(-4,new int[]{-21,144,-19,66}));
    AddState(144,new State(-42));
    AddState(145,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110,59,-21,127,-21,138,-21,148,-21,133,-21,146,-21,137,-21,134,-21,139,-21,136,-21,131,-21,147,-21,145,-21,142,-21},new int[]{-4,146,-16,147,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(146,new State(new int[]{44,11,59,-22,127,-22,130,-22,138,-22,148,-22,133,-22,146,-22,137,-22,134,-22,139,-22,143,-22,136,-22,131,-22,147,-22,145,-22,142,-22}));
    AddState(147,new State(new int[]{42,13,47,15,37,17,43,19,45,21,94,23,154,25,60,27,62,29,151,31,150,33,152,35,153,37,156,39,155,41,44,-59,59,-59,127,-59,130,-59,138,-59,148,-59,133,-59,146,-59,137,-59,134,-59,139,-59,143,-59,136,-59,131,-59,147,-59,145,-59,142,-59,41,-59}));
    AddState(148,new State(-23));
    AddState(149,new State(new int[]{130,52},new int[]{-1,150}));
    AddState(150,new State(new int[]{61,151,44,163}));
    AddState(151,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,152,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(152,new State(new int[]{44,153}));
    AddState(153,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,154,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(154,new State(new int[]{44,161,138,-35},new int[]{-33,155}));
    AddState(155,new State(new int[]{138,156}));
    AddState(156,new State(-24,new int[]{-34,157}));
    AddState(157,new State(-4,new int[]{-21,158,-19,66}));
    AddState(158,new State(-25,new int[]{-35,159}));
    AddState(159,new State(new int[]{131,160}));
    AddState(160,new State(-26));
    AddState(161,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,162,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(162,new State(-34));
    AddState(163,new State(new int[]{130,52},new int[]{-1,164}));
    AddState(164,new State(new int[]{132,165}));
    AddState(165,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-24,166,-16,57,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(166,new State(new int[]{138,167}));
    AddState(167,new State(-27,new int[]{-36,168}));
    AddState(168,new State(-4,new int[]{-21,169,-19,66}));
    AddState(169,new State(-28,new int[]{-37,170}));
    AddState(170,new State(new int[]{131,171}));
    AddState(171,new State(-29));
    AddState(172,new State(new int[]{130,52},new int[]{-11,173,-1,189}));
    AddState(173,new State(new int[]{40,174}));
    AddState(174,new State(new int[]{149,182,130,52,41,-37},new int[]{-12,175,-13,181,-1,183}));
    AddState(175,new State(new int[]{41,176}));
    AddState(176,new State(-30,new int[]{-38,177}));
    AddState(177,new State(-4,new int[]{-21,178,-19,66}));
    AddState(178,new State(-31,new int[]{-39,179}));
    AddState(179,new State(new int[]{131,180}));
    AddState(180,new State(-32));
    AddState(181,new State(-36));
    AddState(182,new State(-97));
    AddState(183,new State(-57,new int[]{-15,184}));
    AddState(184,new State(new int[]{44,186,41,-100},new int[]{-14,185}));
    AddState(185,new State(-98));
    AddState(186,new State(new int[]{149,188,130,52},new int[]{-1,187}));
    AddState(187,new State(-56));
    AddState(188,new State(-99));
    AddState(189,new State(new int[]{46,190,58,192,40,-44}));
    AddState(190,new State(new int[]{130,52},new int[]{-1,191}));
    AddState(191,new State(-45));
    AddState(192,new State(new int[]{130,52},new int[]{-1,193}));
    AddState(193,new State(-46));
    AddState(194,new State(new int[]{130,52},new int[]{-7,195,-1,200}));
    AddState(195,new State(new int[]{61,198,59,-39,127,-39,130,-39,138,-39,148,-39,133,-39,146,-39,137,-39,134,-39,139,-39,143,-39,136,-39,131,-39,147,-39,145,-39,142,-39},new int[]{-8,196,-9,197}));
    AddState(196,new State(-33));
    AddState(197,new State(-38));
    AddState(198,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110},new int[]{-4,199,-16,147,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(199,new State(new int[]{44,11,59,-58,127,-58,130,-58,138,-58,148,-58,133,-58,146,-58,137,-58,134,-58,139,-58,143,-58,136,-58,131,-58,147,-58,145,-58,142,-58}));
    AddState(200,new State(-57,new int[]{-15,201}));
    AddState(201,new State(new int[]{44,202,61,-55,59,-55,127,-55,130,-55,138,-55,148,-55,133,-55,146,-55,137,-55,134,-55,139,-55,143,-55,136,-55,131,-55,147,-55,145,-55,142,-55}));
    AddState(202,new State(new int[]{130,52},new int[]{-1,187}));
    AddState(203,new State(new int[]{130,52},new int[]{-1,204}));
    AddState(204,new State(-52));
    AddState(205,new State(-89));
    AddState(206,new State(new int[]{130,52},new int[]{-1,207}));
    AddState(207,new State(new int[]{40,209,123,87,128,214},new int[]{-44,208,-43,213}));
    AddState(208,new State(-90));
    AddState(209,new State(new int[]{140,43,129,48,128,49,130,52,143,60,37,84,123,87,40,103,157,106,35,108,158,110,41,-95},new int[]{-45,210,-4,212,-16,147,-2,44,-5,50,-1,51,-40,53,-22,58,-41,59,-42,83,-43,86}));
    AddState(210,new State(new int[]{41,211}));
    AddState(211,new State(-91));
    AddState(212,new State(new int[]{44,11,41,-94}));
    AddState(213,new State(-92));
    AddState(214,new State(-93));

    Rule[] rules=new Rule[125];
    rules[1]=new Rule(-18, new int[]{-17,127});
    rules[2]=new Rule(-17, new int[]{-19,127});
    rules[3]=new Rule(-19, new int[]{-19,-6,-20});
    rules[4]=new Rule(-19, new int[]{});
    rules[5]=new Rule(-20, new int[]{59});
    rules[6]=new Rule(-20, new int[]{});
    rules[7]=new Rule(-21, new int[]{-19});
    rules[8]=new Rule(-6, new int[]{-3,61,-4});
    rules[9]=new Rule(-6, new int[]{-22});
    rules[10]=new Rule(-23, new int[]{});
    rules[11]=new Rule(-6, new int[]{138,-23,131});
    rules[12]=new Rule(-25, new int[]{});
    rules[13]=new Rule(-26, new int[]{});
    rules[14]=new Rule(-6, new int[]{148,-24,138,-25,-21,-26,131});
    rules[15]=new Rule(-27, new int[]{});
    rules[16]=new Rule(-28, new int[]{});
    rules[17]=new Rule(-6, new int[]{133,-27,-21,-28,147,-24});
    rules[18]=new Rule(-29, new int[]{});
    rules[19]=new Rule(-30, new int[]{});
    rules[20]=new Rule(-6, new int[]{146,-24,141,-29,-21,-30,-31,-32,131});
    rules[21]=new Rule(-6, new int[]{137});
    rules[22]=new Rule(-6, new int[]{137,-4});
    rules[23]=new Rule(-6, new int[]{134});
    rules[24]=new Rule(-34, new int[]{});
    rules[25]=new Rule(-35, new int[]{});
    rules[26]=new Rule(-6, new int[]{139,-1,61,-24,44,-24,-33,138,-34,-21,-35,131});
    rules[27]=new Rule(-36, new int[]{});
    rules[28]=new Rule(-37, new int[]{});
    rules[29]=new Rule(-6, new int[]{139,-1,44,-1,132,-24,138,-36,-21,-37,131});
    rules[30]=new Rule(-38, new int[]{});
    rules[31]=new Rule(-39, new int[]{});
    rules[32]=new Rule(-6, new int[]{143,-11,40,-12,41,-38,-21,-39,131});
    rules[33]=new Rule(-6, new int[]{136,-7,-8});
    rules[34]=new Rule(-33, new int[]{44,-24});
    rules[35]=new Rule(-33, new int[]{});
    rules[36]=new Rule(-12, new int[]{-13});
    rules[37]=new Rule(-12, new int[]{});
    rules[38]=new Rule(-8, new int[]{-9});
    rules[39]=new Rule(-8, new int[]{});
    rules[40]=new Rule(-31, new int[]{-31,145,-24,141,-21});
    rules[41]=new Rule(-31, new int[]{});
    rules[42]=new Rule(-32, new int[]{142,-21});
    rules[43]=new Rule(-32, new int[]{});
    rules[44]=new Rule(-11, new int[]{-1});
    rules[45]=new Rule(-11, new int[]{-1,46,-1});
    rules[46]=new Rule(-11, new int[]{-1,58,-1});
    rules[47]=new Rule(-3, new int[]{-5,-10});
    rules[48]=new Rule(-10, new int[]{-10,44,-5});
    rules[49]=new Rule(-10, new int[]{});
    rules[50]=new Rule(-5, new int[]{-1});
    rules[51]=new Rule(-5, new int[]{-40,91,-24,93});
    rules[52]=new Rule(-5, new int[]{-40,46,-1});
    rules[53]=new Rule(-40, new int[]{-5});
    rules[54]=new Rule(-40, new int[]{-22});
    rules[55]=new Rule(-7, new int[]{-1,-15});
    rules[56]=new Rule(-15, new int[]{-15,44,-1});
    rules[57]=new Rule(-15, new int[]{});
    rules[58]=new Rule(-9, new int[]{61,-4});
    rules[59]=new Rule(-4, new int[]{-16});
    rules[60]=new Rule(-4, new int[]{-4,44,-16});
    rules[61]=new Rule(-24, new int[]{-16});
    rules[62]=new Rule(-16, new int[]{140});
    rules[63]=new Rule(-16, new int[]{-2});
    rules[64]=new Rule(-16, new int[]{128});
    rules[65]=new Rule(-16, new int[]{-5});
    rules[66]=new Rule(-16, new int[]{-41});
    rules[67]=new Rule(-16, new int[]{-42});
    rules[68]=new Rule(-16, new int[]{-22});
    rules[69]=new Rule(-16, new int[]{-43});
    rules[70]=new Rule(-16, new int[]{40,-16,41});
    rules[71]=new Rule(-16, new int[]{-16,42,-16});
    rules[72]=new Rule(-16, new int[]{-16,47,-16});
    rules[73]=new Rule(-16, new int[]{-16,37,-16});
    rules[74]=new Rule(-16, new int[]{-16,43,-16});
    rules[75]=new Rule(-16, new int[]{-16,45,-16});
    rules[76]=new Rule(-16, new int[]{-16,94,-16});
    rules[77]=new Rule(-16, new int[]{-16,154,-16});
    rules[78]=new Rule(-16, new int[]{-16,60,-16});
    rules[79]=new Rule(-16, new int[]{-16,62,-16});
    rules[80]=new Rule(-16, new int[]{-16,151,-16});
    rules[81]=new Rule(-16, new int[]{-16,150,-16});
    rules[82]=new Rule(-16, new int[]{-16,152,-16});
    rules[83]=new Rule(-16, new int[]{-16,153,-16});
    rules[84]=new Rule(-16, new int[]{-16,156,-16});
    rules[85]=new Rule(-16, new int[]{-16,155,-16});
    rules[86]=new Rule(-16, new int[]{157,-16});
    rules[87]=new Rule(-16, new int[]{35,-16});
    rules[88]=new Rule(-16, new int[]{158,-16});
    rules[89]=new Rule(-22, new int[]{-40,-44});
    rules[90]=new Rule(-22, new int[]{-40,58,-1,-44});
    rules[91]=new Rule(-44, new int[]{40,-45,41});
    rules[92]=new Rule(-44, new int[]{-43});
    rules[93]=new Rule(-44, new int[]{128});
    rules[94]=new Rule(-45, new int[]{-4});
    rules[95]=new Rule(-45, new int[]{});
    rules[96]=new Rule(-41, new int[]{143,40,-12,41,-21,131});
    rules[97]=new Rule(-13, new int[]{149});
    rules[98]=new Rule(-13, new int[]{-1,-15,-14});
    rules[99]=new Rule(-14, new int[]{44,149});
    rules[100]=new Rule(-14, new int[]{});
    rules[101]=new Rule(-42, new int[]{37,-1});
    rules[102]=new Rule(-43, new int[]{123,-46,125});
    rules[103]=new Rule(-46, new int[]{-47});
    rules[104]=new Rule(-46, new int[]{-48});
    rules[105]=new Rule(-46, new int[]{-47,59,-48});
    rules[106]=new Rule(-46, new int[]{-48,59,-47});
    rules[107]=new Rule(-47, new int[]{-49});
    rules[108]=new Rule(-47, new int[]{});
    rules[109]=new Rule(-48, new int[]{-50});
    rules[110]=new Rule(-48, new int[]{});
    rules[111]=new Rule(-49, new int[]{-16,-51,44});
    rules[112]=new Rule(-49, new int[]{-16,-51});
    rules[113]=new Rule(-50, new int[]{-52,-53,44});
    rules[114]=new Rule(-50, new int[]{-52,-53});
    rules[115]=new Rule(-51, new int[]{-51,44,-16});
    rules[116]=new Rule(-51, new int[]{});
    rules[117]=new Rule(-53, new int[]{-53,44,-52});
    rules[118]=new Rule(-53, new int[]{});
    rules[119]=new Rule(-52, new int[]{91,-16,93,61,-16});
    rules[120]=new Rule(-52, new int[]{-1,61,-16});
    rules[121]=new Rule(-1, new int[]{130});
    rules[122]=new Rule(-2, new int[]{-2,129});
    rules[123]=new Rule(-2, new int[]{-2,46,129});
    rules[124]=new Rule(-2, new int[]{129});
    this.InitRules(rules);

    this.InitNonTerminals(new string[] {"", "NAME", "NUMBER", "VARLIST1", "EXPLIST1", 
      "VAR", "STAT", "DECLIST", "INIT_OPT", "INIT", "VAR_LIST", "FUNCNAME", "PL_OPT", 
      "PARLIST1", "SMTH_OPT", "NAME_LIST", "EXP", "PROGRAM", "$accept", "CHUNK", 
      "COMMA", "BLOCK", "FUNCTION_CALL", "Anon@1", "EXP1", "Anon@2", "Anon@3", 
      "Anon@4", "Anon@5", "Anon@6", "Anon@7", "ELSEIF_LIST", "ELSE_LIST", "EXPTEMP", 
      "Anon@8", "Anon@9", "Anon@10", "Anon@11", "Anon@12", "Anon@13", "VARORFUNC", 
      "FUNCTION", "UPVALUE", "TABLE_CONSTRUCTOR", "ARGS", "EXP_LIST_OPT", "FIELDLIST", 
      "LFIELDLIST", "FFIELDLIST", "LFIELDLIST1", "FFIELDLIST1", "LST", "FFIELD", 
      "FST", });
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // PROGRAM -> CHUNK, EOF
{/*m_tree.CreateNode(ASTree.PROGRAM, ASTree.Root);*/}
        break;
      case 3: // CHUNK -> CHUNK, STAT, COMMA
{ /*m_tree.CreateNode(, ) ;*/}
        break;
      case 8: // STAT -> VARLIST1, '=', EXPLIST1
{ CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.ASSIGN, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN); /*m_table.AddIdentiferList($1, $3);*/ }
        break;
      case 10: // Anon@1 -> /* empty */
{ /*m_table.AddBlockStartMark();} BLOCK {m_table.AddBlockEndMark();*/}
        break;
      case 12: // Anon@2 -> /* empty */
{/*m_table.AddBlockStartMark();*/}
        break;
      case 13: // Anon@3 -> /* empty */
{/*m_table.AddBlockEndMark();*/}
        break;
      case 15: // Anon@4 -> /* empty */
{/*m_table.AddBlockStartMark();*/}
        break;
      case 16: // Anon@5 -> /* empty */
{/*m_table.AddBlockEndMark();*/}
        break;
      case 18: // Anon@6 -> /* empty */
{/*m_table.AddBlockStartMark();*/}
        break;
      case 19: // Anon@7 -> /* empty */
{/*m_table.AddBlockEndMark();*/}
        break;
      case 24: // Anon@8 -> /* empty */
{/*m_table.AddBlockStartMark();*/}
        break;
      case 25: // Anon@9 -> /* empty */
{/*m_table.AddBlockEndMark();*/}
        break;
      case 27: // Anon@10 -> /* empty */
{/*m_table.AddBlockStartMark();*/}
        break;
      case 28: // Anon@11 -> /* empty */
{/*m_table.AddBlockEndMark();*/}
        break;
      case 30: // Anon@12 -> /* empty */
{/* m_table.AddFunctionDefinition($2, $4);*/ }
        break;
      case 31: // Anon@13 -> /* empty */
{/* m_table.ReturnFromFunction() ;*/}
        break;
      case 33: // STAT -> local, DECLIST, INIT_OPT
{/*m_table.AddIdentiferList($2, $3, false);*/}
        break;
      case 36: // PL_OPT -> PARLIST1
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s;}
        break;
      case 37: // PL_OPT -> /* empty */
{CurrentSemanticValue.s = "";}
        break;
      case 38: // INIT_OPT -> INIT
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s;}
        break;
      case 44: // FUNCNAME -> NAME
{CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s;}
        break;
      case 47: // VARLIST1 -> VAR, VAR_LIST
{ TreeNode<Node> n = m_tree.CreateNode(ASTree.VARLIST, ValueStack[ValueStack.Depth-2].TN); CurrentSemanticValue.TN = m_tree.AppendChild(n, ValueStack[ValueStack.Depth-1].TNL);}
        break;
      case 48: // VAR_LIST -> VAR_LIST, ',', VAR
{ CurrentSemanticValue.TNL = m_tree.AppendNodeList(ValueStack[ValueStack.Depth-3].TNL, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 49: // VAR_LIST -> /* empty */
{CurrentSemanticValue.TNL = null;}
        break;
      case 50: // VAR -> NAME
{ CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.Id, ValueStack[ValueStack.Depth-1].s);}
        break;
      case 55: // DECLIST -> NAME, NAME_LIST
{CurrentSemanticValue.s = ValueStack[ValueStack.Depth-2].s + ' ' + ValueStack[ValueStack.Depth-1].s;}
        break;
      case 56: // NAME_LIST -> NAME_LIST, ',', NAME
{CurrentSemanticValue.s = ValueStack[ValueStack.Depth-3].s + ' ' + ValueStack[ValueStack.Depth-1].s;}
        break;
      case 57: // NAME_LIST -> /* empty */
{CurrentSemanticValue.s = "";}
        break;
      case 59: // EXPLIST1 -> EXP
{CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.EXPLIST, ValueStack[ValueStack.Depth-1].TN);}
        break;
      case 60: // EXPLIST1 -> EXPLIST1, ',', EXP
{CurrentSemanticValue.TN = m_tree.AppendChild(ASTree.EXPLIST, ValueStack[ValueStack.Depth-3].TN, ValueStack[ValueStack.Depth-1].TN) ;}
        break;
      case 63: // EXP -> NUMBER
{ CurrentSemanticValue.TN = m_tree.CreateNode(ASTree.NUMBER, ValueStack[ValueStack.Depth-1].d);}
        break;
      case 65: // EXP -> VAR
{/*m_table.CheckIdentiferVisibility($1);*/}
        break;
      case 97: // PARLIST1 -> SMTH
{CurrentSemanticValue.s = "...";}
        break;
      case 98: // PARLIST1 -> NAME, NAME_LIST, SMTH_OPT
{CurrentSemanticValue.s = ValueStack[ValueStack.Depth-3].s + ' ' + ValueStack[ValueStack.Depth-2].s + ' ' + ValueStack[ValueStack.Depth-1].s;}
        break;
      case 99: // SMTH_OPT -> ',', SMTH
{CurrentSemanticValue.s = "...";}
        break;
      case 100: // SMTH_OPT -> /* empty */
{CurrentSemanticValue.s = "";}
        break;
      case 121: // NAME -> identifer
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 122: // NUMBER -> NUMBER, digit
{ if (_baseNumber == 0) {CurrentSemanticValue.d = ValueStack[ValueStack.Depth-2].d * 10 + ValueStack[ValueStack.Depth-1].i;} else {_baseNumber*=0.1; CurrentSemanticValue.d = ValueStack[ValueStack.Depth-2].d + ValueStack[ValueStack.Depth-1].i * _baseNumber; } }
        break;
      case 123: // NUMBER -> NUMBER, '.', digit
{ if (_baseNumber != 0) {YYError();} else {_baseNumber = 0.1;CurrentSemanticValue.d = ValueStack[ValueStack.Depth-3].d + ValueStack[ValueStack.Depth-1].i * _baseNumber;}}
        break;
      case 124: // NUMBER -> digit
{ CurrentSemanticValue.d = ValueStack[ValueStack.Depth-1].i; _baseNumber = 0; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public Parser(IdentiferTable table, ASTree tree) : base(null) { m_table = table; m_tree = tree;}
}
}
