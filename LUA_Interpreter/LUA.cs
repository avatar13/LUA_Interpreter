// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  AVATAR-èä
// DateTime: 16.11.2011 19:01:14
// UserName: Avatar
// Input file <Grammar_LUA.y>

// options: lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

public enum Tokens {error=126,
    EOF=127,CHAR=128,DIGIT=129,end=130,inT=131,repeatT=132,
    breakT=133,falseT=134,local=135,returnT=136,doT=137,forT=138,
    nil=139,then=140,elseT=141,functionT=142,trueT=143,elseifT=144,
    ifT=145,untilT=146,whileT=147,SMTH=148,ge=149,le=150,
    e=151,ne=152,doublePoint=153,or=154,and=155,not=156,
    UMINUS=157};

public class Parser : ShiftReduceParser<int, LexLocation>
{
#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

    protected override void Initialize()
    {
        this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

        this.InitStateTable(215);
        AddState(0, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -1, 1, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(1, new State(new int[] { 127, 2 }));
        AddState(2, new State(-1));
        AddState(3, new State(-2));
        AddState(4, new State(new int[] { 127, 5, 59, 6, 133, 212, 136, 213 }, new int[] { -4, 208 }));
        AddState(5, new State(-3));
        AddState(6, new State(new int[] { 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -5, 7, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(7, new State(-7));
        AddState(8, new State(new int[] { 61, 9, 44, 206 }));
        AddState(9, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -8, 10, -10, 11, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(10, new State(-9));
        AddState(11, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40, 44, 204, 127, -41, 59, -41, 133, -41, 136, -41, 41, -41, 137, -41 }));
        AddState(12, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 13, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(13, new State(new int[] { 42, -52, 47, -52, 37, -52, 43, -52, 45, -52, 94, 22, 153, -52, 60, -52, 62, -52, 150, -52, 149, -52, 151, -52, 152, -52, 155, -52, 154, -52, 44, -52, 127, -52, 59, -52, 133, -52, 136, -52, 93, -52, 41, -52, 125, -52, 137, -52, 140, -52 }));
        AddState(14, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 15, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(15, new State(new int[] { 42, -53, 47, -53, 37, -53, 43, -53, 45, -53, 94, 22, 153, -53, 60, -53, 62, -53, 150, -53, 149, -53, 151, -53, 152, -53, 155, -53, 154, -53, 44, -53, 127, -53, 59, -53, 133, -53, 136, -53, 93, -53, 41, -53, 125, -53, 137, -53, 140, -53 }));
        AddState(16, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 17, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(17, new State(new int[] { 42, -54, 47, -54, 37, -54, 43, -54, 45, -54, 94, 22, 153, -54, 60, -54, 62, -54, 150, -54, 149, -54, 151, -54, 152, -54, 155, -54, 154, -54, 44, -54, 127, -54, 59, -54, 133, -54, 136, -54, 93, -54, 41, -54, 125, -54, 137, -54, 140, -54 }));
        AddState(18, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 19, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(19, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, -55, 45, -55, 94, 22, 153, -55, 60, -55, 62, -55, 150, -55, 149, -55, 151, -55, 152, -55, 155, 38, 154, -55, 44, -55, 127, -55, 59, -55, 133, -55, 136, -55, 93, -55, 41, -55, 125, -55, 137, -55, 140, -55 }));
        AddState(20, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 21, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(21, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, -56, 45, -56, 94, 22, 153, -56, 60, -56, 62, -56, 150, -56, 149, -56, 151, -56, 152, -56, 155, 38, 154, -56, 44, -56, 127, -56, 59, -56, 133, -56, 136, -56, 93, -56, 41, -56, 125, -56, 137, -56, 140, -56 }));
        AddState(22, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 23, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(23, new State(-57));
        AddState(24, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 25, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(25, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, -58, 60, -58, 62, -58, 150, -58, 149, -58, 151, -58, 152, -58, 155, 38, 154, 40, 44, -58, 127, -58, 59, -58, 133, -58, 136, -58, 93, -58, 41, -58, 125, -58, 137, -58, 140, -58 }));
        AddState(26, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 27, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(27, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, -59, 62, -59, 150, -59, 149, -59, 151, -59, 152, -59, 155, 38, 154, 40, 44, -59, 127, -59, 59, -59, 133, -59, 136, -59, 93, -59, 41, -59, 125, -59, 137, -59, 140, -59 }));
        AddState(28, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 29, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(29, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, -60, 62, -60, 150, -60, 149, -60, 151, -60, 152, -60, 155, 38, 154, 40, 44, -60, 127, -60, 59, -60, 133, -60, 136, -60, 93, -60, 41, -60, 125, -60, 137, -60, 140, -60 }));
        AddState(30, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 31, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(31, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, -61, 62, -61, 150, -61, 149, -61, 151, -61, 152, -61, 155, 38, 154, 40, 44, -61, 127, -61, 59, -61, 133, -61, 136, -61, 93, -61, 41, -61, 125, -61, 137, -61, 140, -61 }));
        AddState(32, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 33, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(33, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, -62, 62, -62, 150, -62, 149, -62, 151, -62, 152, -62, 155, 38, 154, 40, 44, -62, 127, -62, 59, -62, 133, -62, 136, -62, 93, -62, 41, -62, 125, -62, 137, -62, 140, -62 }));
        AddState(34, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 35, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(35, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, -63, 62, -63, 150, -63, 149, -63, 151, -63, 152, -63, 155, 38, 154, 40, 44, -63, 127, -63, 59, -63, 133, -63, 136, -63, 93, -63, 41, -63, 125, -63, 137, -63, 140, -63 }));
        AddState(36, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 37, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(37, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, -64, 62, -64, 150, -64, 149, -64, 151, -64, 152, -64, 155, 38, 154, 40, 44, -64, 127, -64, 59, -64, 133, -64, 136, -64, 93, -64, 41, -64, 125, -64, 137, -64, 140, -64 }));
        AddState(38, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 39, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(39, new State(new int[] { 42, -65, 47, -65, 37, -65, 43, -65, 45, -65, 94, 22, 153, -65, 60, -65, 62, -65, 150, -65, 149, -65, 151, -65, 152, -65, 155, -65, 154, -65, 44, -65, 127, -65, 59, -65, 133, -65, 136, -65, 93, -65, 41, -65, 125, -65, 137, -65, 140, -65 }));
        AddState(40, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 41, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(41, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, -66, 45, -66, 94, 22, 153, -66, 60, -66, 62, -66, 150, -66, 149, -66, 151, -66, 152, -66, 155, 38, 154, -66, 44, -66, 127, -66, 59, -66, 133, -66, 136, -66, 93, -66, 41, -66, 125, -66, 137, -66, 140, -66 }));
        AddState(42, new State(-43));
        AddState(43, new State(-44));
        AddState(44, new State(-45));
        AddState(45, new State(new int[] { 129, 46, 46, 47, 42, -46, 47, -46, 37, -46, 43, -46, 45, -46, 94, -46, 153, -46, 60, -46, 62, -46, 150, -46, 149, -46, 151, -46, 152, -46, 155, -46, 154, -46, 44, -46, 127, -46, 59, -46, 133, -46, 136, -46, 93, -46, 41, -46, 125, -46, 137, -46, 140, -46 }));
        AddState(46, new State(-105));
        AddState(47, new State(new int[] { 129, 48 }));
        AddState(48, new State(-107));
        AddState(49, new State(-106));
        AddState(50, new State(-47));
        AddState(51, new State(new int[] { 128, 55 }, new int[] { -29, 52 }));
        AddState(52, new State(new int[] { 34, 53, 128, 54 }));
        AddState(53, new State(-102));
        AddState(54, new State(-104));
        AddState(55, new State(-103));
        AddState(56, new State(-48));
        AddState(57, new State(-49));
        AddState(58, new State(new int[] { 40, 60 }, new int[] { -16, 59 }));
        AddState(59, new State(-79));
        AddState(60, new State(new int[] { 41, 61, 95, 68, 128, 75, 148, 203 }, new int[] { -24, 196, -14, 200, -12, 172 }));
        AddState(61, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 62, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(62, new State(new int[] { 130, 63 }));
        AddState(63, new State(-80));
        AddState(64, new State(-8));
        AddState(65, new State(-6));
        AddState(66, new State(new int[] { 61, -34, 44, -34, 91, -70, 46, -70, 58, -70, 40, -70, 123, -70, 34, -70 }));
        AddState(67, new State(-36));
        AddState(68, new State(new int[] { 128, 55, 129, 73, 95, 74 }, new int[] { -28, 69, -29, 72 }));
        AddState(69, new State(new int[] { 129, 70, 95, 71, 61, -95, 44, -95, 91, -95, 46, -95, 58, -95, 40, -95, 123, -95, 34, -95, 42, -95, 47, -95, 37, -95, 43, -95, 45, -95, 94, -95, 153, -95, 60, -95, 62, -95, 150, -95, 149, -95, 151, -95, 152, -95, 155, -95, 154, -95, 127, -95, 59, -95, 133, -95, 136, -95, 93, -95, 41, -95, 125, -95, 137, -95, 140, -95, 131, -95 }));
        AddState(70, new State(-100));
        AddState(71, new State(-101));
        AddState(72, new State(new int[] { 128, 54, 129, -97, 95, -97, 61, -97, 44, -97, 91, -97, 46, -97, 58, -97, 40, -97, 123, -97, 34, -97, 42, -97, 47, -97, 37, -97, 43, -97, 45, -97, 94, -97, 153, -97, 60, -97, 62, -97, 150, -97, 149, -97, 151, -97, 152, -97, 155, -97, 154, -97, 127, -97, 59, -97, 133, -97, 136, -97, 93, -97, 41, -97, 125, -97, 137, -97, 140, -97, 131, -97 }));
        AddState(73, new State(-98));
        AddState(74, new State(-99));
        AddState(75, new State(new int[] { 128, 55, 129, 73, 95, 74 }, new int[] { -28, 76, -29, 72 }));
        AddState(76, new State(new int[] { 129, 70, 95, 71, 61, -96, 44, -96, 91, -96, 46, -96, 58, -96, 40, -96, 123, -96, 34, -96, 42, -96, 47, -96, 37, -96, 43, -96, 45, -96, 94, -96, 153, -96, 60, -96, 62, -96, 150, -96, 149, -96, 151, -96, 152, -96, 155, -96, 154, -96, 127, -96, 59, -96, 133, -96, 136, -96, 93, -96, 41, -96, 125, -96, 137, -96, 140, -96, 131, -96 }));
        AddState(77, new State(new int[] { 91, 78, 46, 122, 58, 83, 40, 86, 123, 96, 34, 51 }, new int[] { -23, 82, -22, 120, -20, 121 }));
        AddState(78, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 79, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(79, new State(new int[] { 93, 80, 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40 }));
        AddState(80, new State(-37));
        AddState(81, new State(new int[] { 91, 78, 58, 83, 46, 122, 40, 86, 123, 96, 34, 51, 42, -50, 47, -50, 37, -50, 43, -50, 45, -50, 94, -50, 153, -50, 60, -50, 62, -50, 150, -50, 149, -50, 151, -50, 152, -50, 155, -50, 154, -50, 44, -50, 127, -50, 59, -50, 133, -50, 136, -50, 93, -50, 41, -50, 125, -50, 137, -50, 140, -50 }, new int[] { -23, 82, -22, 120, -20, 121 }));
        AddState(82, new State(-73));
        AddState(83, new State(new int[] { 95, 68, 128, 75 }, new int[] { -12, 84 }));
        AddState(84, new State(new int[] { 40, 86, 123, 96, 34, 51 }, new int[] { -23, 85, -22, 120, -20, 121 }));
        AddState(85, new State(-74));
        AddState(86, new State(new int[] { 41, 87, 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -8, 88, -10, 11, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(87, new State(-75));
        AddState(88, new State(new int[] { 41, 89 }));
        AddState(89, new State(-76));
        AddState(90, new State(-70));
        AddState(91, new State(-71));
        AddState(92, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 93, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(93, new State(new int[] { 41, 94, 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40 }));
        AddState(94, new State(-72));
        AddState(95, new State(-51));
        AddState(96, new State(new int[] { 125, 118, 91, 101, 95, 68, 128, 75, 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -25, 97, -26, 119, -12, 112, -10, 115, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -9, 91, -22, 95 }));
        AddState(97, new State(new int[] { 125, 98, 44, 116, 59, 117 }, new int[] { -27, 99 }));
        AddState(98, new State(-85));
        AddState(99, new State(new int[] { 91, 101, 95, 68, 128, 75, 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110, 125, -89, 44, -89, 59, -89 }, new int[] { -26, 100, -12, 112, -10, 115, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -9, 91, -22, 95 }));
        AddState(100, new State(-88));
        AddState(101, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 102, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(102, new State(new int[] { 93, 103, 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40 }));
        AddState(103, new State(new int[] { 61, 104 }));
        AddState(104, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 105, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(105, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40, 125, -90, 44, -90, 59, -90 }));
        AddState(106, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 107, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(107, new State(-67));
        AddState(108, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 109, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(109, new State(-68));
        AddState(110, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 111, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(111, new State(-69));
        AddState(112, new State(new int[] { 61, 113, 91, -36, 58, -36, 46, -36, 40, -36, 123, -36, 34, -36, 42, -36, 47, -36, 37, -36, 43, -36, 45, -36, 94, -36, 153, -36, 60, -36, 62, -36, 150, -36, 149, -36, 151, -36, 152, -36, 155, -36, 154, -36, 125, -36, 44, -36, 59, -36 }));
        AddState(113, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 114, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(114, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40, 125, -91, 44, -91, 59, -91 }));
        AddState(115, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40, 125, -92, 44, -92, 59, -92 }));
        AddState(116, new State(-93));
        AddState(117, new State(-94));
        AddState(118, new State(-86));
        AddState(119, new State(-87));
        AddState(120, new State(-77));
        AddState(121, new State(-78));
        AddState(122, new State(new int[] { 95, 68, 128, 75 }, new int[] { -12, 123 }));
        AddState(123, new State(-38));
        AddState(124, new State(new int[] { 91, -71, 46, -71, 58, -71, 40, -71, 123, -71, 34, -71, 127, -10, 59, -10, 133, -10, 136, -10 }));
        AddState(125, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 126, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(126, new State(new int[] { 130, 127 }));
        AddState(127, new State(-11));
        AddState(128, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 129, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(129, new State(new int[] { 137, 130, 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40 }));
        AddState(130, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 131, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(131, new State(new int[] { 130, 132 }));
        AddState(132, new State(-12));
        AddState(133, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 134, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(134, new State(new int[] { 146, 135 }));
        AddState(135, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 136, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(136, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40, 127, -13, 59, -13, 133, -13, 136, -13 }));
        AddState(137, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 138, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(138, new State(new int[] { 140, 139, 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40 }));
        AddState(139, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 140, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(140, new State(new int[] { 130, 141, 141, 142, 144, 186, 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -11, 181, -6, 190, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(141, new State(-14));
        AddState(142, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 143, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(143, new State(new int[] { 130, 144 }));
        AddState(144, new State(-15));
        AddState(145, new State(new int[] { 95, 68, 128, 75 }, new int[] { -12, 146, -14, 175 }));
        AddState(146, new State(new int[] { 61, 147, 131, -39, 44, -39 }));
        AddState(147, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 148, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(148, new State(new int[] { 44, 149, 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40 }));
        AddState(149, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 150, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(150, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40, 44, 173, 137, -25 }, new int[] { -13, 151 }));
        AddState(151, new State(new int[] { 137, 152 }));
        AddState(152, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 153, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(153, new State(new int[] { 130, 154 }));
        AddState(154, new State(-18));
        AddState(155, new State(new int[] { 95, 68, 128, 75 }, new int[] { -15, 156, -12, 162 }));
        AddState(156, new State(new int[] { 46, 158, 58, 160, 40, 60 }, new int[] { -16, 157 }));
        AddState(157, new State(-20));
        AddState(158, new State(new int[] { 95, 68, 128, 75 }, new int[] { -12, 159 }));
        AddState(159, new State(-32));
        AddState(160, new State(new int[] { 95, 68, 128, 75 }, new int[] { -12, 161 }));
        AddState(161, new State(-33));
        AddState(162, new State(-31));
        AddState(163, new State(new int[] { 142, 164, 95, 68, 128, 75 }, new int[] { -14, 167, -12, 172 }));
        AddState(164, new State(new int[] { 95, 68, 128, 75 }, new int[] { -12, 165 }));
        AddState(165, new State(new int[] { 40, 60 }, new int[] { -16, 166 }));
        AddState(166, new State(-21));
        AddState(167, new State(new int[] { 61, 168, 44, 170, 127, -22, 59, -22, 133, -22, 136, -22 }));
        AddState(168, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -8, 169, -10, 11, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(169, new State(-23));
        AddState(170, new State(new int[] { 95, 68, 128, 75 }, new int[] { -12, 171 }));
        AddState(171, new State(-40));
        AddState(172, new State(-39));
        AddState(173, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 174, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(174, new State(new int[] { 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40, 137, -24 }));
        AddState(175, new State(new int[] { 131, 176, 44, 170 }));
        AddState(176, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -8, 177, -10, 11, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(177, new State(new int[] { 137, 178 }));
        AddState(178, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 179, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(179, new State(new int[] { 130, 180 }));
        AddState(180, new State(-19));
        AddState(181, new State(new int[] { 130, 182, 141, 183 }));
        AddState(182, new State(-16));
        AddState(183, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 184, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(184, new State(new int[] { 130, 185 }));
        AddState(185, new State(-17));
        AddState(186, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 187, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(187, new State(new int[] { 140, 188, 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40 }));
        AddState(188, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 189, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(189, new State(-26));
        AddState(190, new State(new int[] { 144, 186, 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -11, 191, -6, 190, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(191, new State(new int[] { 144, 192 }));
        AddState(192, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -10, 193, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(193, new State(new int[] { 140, 194, 42, 12, 47, 14, 37, 16, 43, 18, 45, 20, 94, 22, 153, 24, 60, 26, 62, 28, 150, 30, 149, 32, 151, 34, 152, 36, 155, 38, 154, 40 }));
        AddState(194, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 195, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(195, new State(-27));
        AddState(196, new State(new int[] { 41, 197 }));
        AddState(197, new State(new int[] { 127, 3, 95, 68, 128, 75, 40, 92, 137, 125, 147, 128, 132, 133, 145, 137, 138, 145, 142, 155, 135, 163 }, new int[] { -6, 198, -1, 64, -3, 4, -5, 65, -7, 8, -17, 66, -12, 67, -18, 77, -9, 124 }));
        AddState(198, new State(new int[] { 130, 199 }));
        AddState(199, new State(-81));
        AddState(200, new State(new int[] { 44, 201, 41, -82 }));
        AddState(201, new State(new int[] { 148, 202, 95, 68, 128, 75 }, new int[] { -12, 171 }));
        AddState(202, new State(-84));
        AddState(203, new State(-83));
        AddState(204, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110 }, new int[] { -8, 205, -10, 11, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(205, new State(-42));
        AddState(206, new State(new int[] { 95, 68, 128, 75, 40, 92 }, new int[] { -17, 207, -12, 67, -18, 77, -9, 91 }));
        AddState(207, new State(new int[] { 61, -35, 44, -35, 91, -70, 46, -70, 58, -70, 40, -70, 123, -70, 34, -70 }));
        AddState(208, new State(new int[] { 127, 209, 59, 210 }));
        AddState(209, new State(-4));
        AddState(210, new State(new int[] { 127, 211 }));
        AddState(211, new State(-5));
        AddState(212, new State(-28));
        AddState(213, new State(new int[] { 139, 42, 134, 43, 143, 44, 129, 49, 34, 51, 148, 56, 142, 58, 95, 68, 128, 75, 40, 92, 123, 96, 156, 106, 35, 108, 157, 110, 127, -29, 59, -29 }, new int[] { -8, 214, -10, 11, -19, 45, -20, 50, -21, 57, -18, 81, -17, 90, -12, 67, -9, 91, -22, 95 }));
        AddState(214, new State(-30));

        Rule[] rules = new Rule[108];
        rules[1] = new Rule(-2, new int[] { -1, 127 });
        rules[2] = new Rule(-1, new int[] { 127 });
        rules[3] = new Rule(-1, new int[] { -3, 127 });
        rules[4] = new Rule(-1, new int[] { -3, -4, 127 });
        rules[5] = new Rule(-1, new int[] { -3, -4, 59, 127 });
        rules[6] = new Rule(-3, new int[] { -5 });
        rules[7] = new Rule(-3, new int[] { -3, 59, -5 });
        rules[8] = new Rule(-6, new int[] { -1 });
        rules[9] = new Rule(-5, new int[] { -7, 61, -8 });
        rules[10] = new Rule(-5, new int[] { -9 });
        rules[11] = new Rule(-5, new int[] { 137, -6, 130 });
        rules[12] = new Rule(-5, new int[] { 147, -10, 137, -6, 130 });
        rules[13] = new Rule(-5, new int[] { 132, -6, 146, -10 });
        rules[14] = new Rule(-5, new int[] { 145, -10, 140, -6, 130 });
        rules[15] = new Rule(-5, new int[] { 145, -10, 140, -6, 141, -6, 130 });
        rules[16] = new Rule(-5, new int[] { 145, -10, 140, -6, -11, 130 });
        rules[17] = new Rule(-5, new int[] { 145, -10, 140, -6, -11, 141, -6, 130 });
        rules[18] = new Rule(-5, new int[] { 138, -12, 61, -10, 44, -10, -13, 137, -6, 130 });
        rules[19] = new Rule(-5, new int[] { 138, -14, 131, -8, 137, -6, 130 });
        rules[20] = new Rule(-5, new int[] { 142, -15, -16 });
        rules[21] = new Rule(-5, new int[] { 135, 142, -12, -16 });
        rules[22] = new Rule(-5, new int[] { 135, -14 });
        rules[23] = new Rule(-5, new int[] { 135, -14, 61, -8 });
        rules[24] = new Rule(-13, new int[] { 44, -10 });
        rules[25] = new Rule(-13, new int[] { });
        rules[26] = new Rule(-11, new int[] { 144, -10, 140, -6 });
        rules[27] = new Rule(-11, new int[] { -6, -11, 144, -10, 140, -6 });
        rules[28] = new Rule(-4, new int[] { 133 });
        rules[29] = new Rule(-4, new int[] { 136 });
        rules[30] = new Rule(-4, new int[] { 136, -8 });
        rules[31] = new Rule(-15, new int[] { -12 });
        rules[32] = new Rule(-15, new int[] { -15, 46, -12 });
        rules[33] = new Rule(-15, new int[] { -15, 58, -12 });
        rules[34] = new Rule(-7, new int[] { -17 });
        rules[35] = new Rule(-7, new int[] { -7, 44, -17 });
        rules[36] = new Rule(-17, new int[] { -12 });
        rules[37] = new Rule(-17, new int[] { -18, 91, -10, 93 });
        rules[38] = new Rule(-17, new int[] { -18, 46, -12 });
        rules[39] = new Rule(-14, new int[] { -12 });
        rules[40] = new Rule(-14, new int[] { -14, 44, -12 });
        rules[41] = new Rule(-8, new int[] { -10 });
        rules[42] = new Rule(-8, new int[] { -10, 44, -8 });
        rules[43] = new Rule(-10, new int[] { 139 });
        rules[44] = new Rule(-10, new int[] { 134 });
        rules[45] = new Rule(-10, new int[] { 143 });
        rules[46] = new Rule(-10, new int[] { -19 });
        rules[47] = new Rule(-10, new int[] { -20 });
        rules[48] = new Rule(-10, new int[] { 148 });
        rules[49] = new Rule(-10, new int[] { -21 });
        rules[50] = new Rule(-10, new int[] { -18 });
        rules[51] = new Rule(-10, new int[] { -22 });
        rules[52] = new Rule(-10, new int[] { -10, 42, -10 });
        rules[53] = new Rule(-10, new int[] { -10, 47, -10 });
        rules[54] = new Rule(-10, new int[] { -10, 37, -10 });
        rules[55] = new Rule(-10, new int[] { -10, 43, -10 });
        rules[56] = new Rule(-10, new int[] { -10, 45, -10 });
        rules[57] = new Rule(-10, new int[] { -10, 94, -10 });
        rules[58] = new Rule(-10, new int[] { -10, 153, -10 });
        rules[59] = new Rule(-10, new int[] { -10, 60, -10 });
        rules[60] = new Rule(-10, new int[] { -10, 62, -10 });
        rules[61] = new Rule(-10, new int[] { -10, 150, -10 });
        rules[62] = new Rule(-10, new int[] { -10, 149, -10 });
        rules[63] = new Rule(-10, new int[] { -10, 151, -10 });
        rules[64] = new Rule(-10, new int[] { -10, 152, -10 });
        rules[65] = new Rule(-10, new int[] { -10, 155, -10 });
        rules[66] = new Rule(-10, new int[] { -10, 154, -10 });
        rules[67] = new Rule(-10, new int[] { 156, -10 });
        rules[68] = new Rule(-10, new int[] { 35, -10 });
        rules[69] = new Rule(-10, new int[] { 157, -10 });
        rules[70] = new Rule(-18, new int[] { -17 });
        rules[71] = new Rule(-18, new int[] { -9 });
        rules[72] = new Rule(-18, new int[] { 40, -10, 41 });
        rules[73] = new Rule(-9, new int[] { -18, -23 });
        rules[74] = new Rule(-9, new int[] { -18, 58, -12, -23 });
        rules[75] = new Rule(-23, new int[] { 40, 41 });
        rules[76] = new Rule(-23, new int[] { 40, -8, 41 });
        rules[77] = new Rule(-23, new int[] { -22 });
        rules[78] = new Rule(-23, new int[] { -20 });
        rules[79] = new Rule(-21, new int[] { 142, -16 });
        rules[80] = new Rule(-16, new int[] { 40, 41, -6, 130 });
        rules[81] = new Rule(-16, new int[] { 40, -24, 41, -6, 130 });
        rules[82] = new Rule(-24, new int[] { -14 });
        rules[83] = new Rule(-24, new int[] { 148 });
        rules[84] = new Rule(-24, new int[] { -14, 44, 148 });
        rules[85] = new Rule(-22, new int[] { 123, -25, 125 });
        rules[86] = new Rule(-22, new int[] { 123, 125 });
        rules[87] = new Rule(-25, new int[] { -26 });
        rules[88] = new Rule(-25, new int[] { -25, -27, -26 });
        rules[89] = new Rule(-25, new int[] { -25, -27 });
        rules[90] = new Rule(-26, new int[] { 91, -10, 93, 61, -10 });
        rules[91] = new Rule(-26, new int[] { -12, 61, -10 });
        rules[92] = new Rule(-26, new int[] { -10 });
        rules[93] = new Rule(-27, new int[] { 44 });
        rules[94] = new Rule(-27, new int[] { 59 });
        rules[95] = new Rule(-12, new int[] { 95, -28 });
        rules[96] = new Rule(-12, new int[] { 128, -28 });
        rules[97] = new Rule(-28, new int[] { -29 });
        rules[98] = new Rule(-28, new int[] { 129 });
        rules[99] = new Rule(-28, new int[] { 95 });
        rules[100] = new Rule(-28, new int[] { -28, 129 });
        rules[101] = new Rule(-28, new int[] { -28, 95 });
        rules[102] = new Rule(-20, new int[] { 34, -29, 34 });
        rules[103] = new Rule(-29, new int[] { 128 });
        rules[104] = new Rule(-29, new int[] { -29, 128 });
        rules[105] = new Rule(-19, new int[] { -19, 129 });
        rules[106] = new Rule(-19, new int[] { 129 });
        rules[107] = new Rule(-19, new int[] { -19, 46, 129 });
        this.InitRules(rules);

        this.InitNonTerminals(new string[] {"", "CHUNK", "$accept", "STAT_LIST", "LASTSTAT", 
      "STAT", "BLOCK", "VARLIST1", "EXPLIST1", "FUNCTION_CALL", "EXP", "ELSEIF_STAT", 
      "NAME", "EXP_LIST", "NAME_LIST", "FUNCNAME", "FUNCBODY", "VAR", "PREFIXEXP", 
      "NUMBER", "STRING", "FUNCTION", "TABLE_CONSTRUCTOR", "ARGS", "PARLIST1", 
      "FIELDLIST", "FIELD", "FIELD_SEP", "NAME_SEQ", "CHAR_SEQUENCE", });
    }

    protected override void DoAction(int action)
    {
        /*switch (action)
        {
        }*/
    }

    protected override string TerminalToString(int terminal)
    {
        if (aliasses != null && aliasses.ContainsKey(terminal))
            return aliasses[terminal];
        else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
            return ((Tokens)terminal).ToString();
        else
            return CharToString((char)terminal);
    }

    public Parser() : base(null) { }
    /*
     * Copied from GPPG documentation.
     */
}

public class Lexer : QUT.Gppg.AbstractScanner<int, LexLocation>
{
    private System.IO.TextReader reader;
    private string str;

    //
    // Version 1.2.0 needed the following code.
    // In V1.2.1 the base class provides this empty default.
    //
    // public override LexLocation yylloc { 
    //     get { return null; } 
    //     set { /* skip */; }
    // }
    //

    public Lexer(System.IO.TextReader reader)
    {
        str = "";
        this.reader = reader;
    }

    public override int yylex()
    {
        if (!str.Equals(""))
        {
            yylval = char.ToLower(str[0]) - 'a';
            str = str.Remove(0, 1);
            return (int)Tokens.CHAR;
        }
        char ch;
        int ord = reader.Read();
        //
        // Must check for EOF
        //
        if (ord == -1)
            return (int)Tokens.EOF;
        else
            ch = (char)ord;

        if (ch == '\n')
            //return ch;
            return yylex();
        else if (char.IsWhiteSpace(ch))
            return yylex();
        else if (char.IsDigit(ch))
        {
            yylval = ch - '0';
            return (int)Tokens.DIGIT;
        }
        // Don't use IsLetter here!
        else if ((ch >= 'a' && ch <= 'z') ||
                 (ch >= 'A' && ch <= 'Z'))
        {
            str = "";
            int i = 0;
            while ((ch >= 'a' && ch <= 'z') ||
                   (ch >= 'A' && ch <= 'Z'))
            {
                str = str.Insert(i, ch.ToString());
                ord = reader.Read();
                if (ord == -1)
                {
                }
                else
                {
                    ch = (char)ord;
                    i++;
                }
            }
            if (str.Equals("function"))
            {
                str = "";
                return (int)Tokens.functionT;
            }
            else if (str.Equals("do"))
            {
                str = "";
                return (int)Tokens.doT;
            }
            else if (str.Equals("elseif"))
            {
                str = "";
                return (int)Tokens.elseifT;
            }
            else if (str.Equals("if"))
            {
                str = "";
                return (int)Tokens.ifT;
            }
            else if (str.Equals("else"))
            {
                str = "";
                return (int)Tokens.elseT;
            }
            else if (str.Equals("return"))
            {
                str = "";
                return (int)Tokens.returnT;
            }
            else if (str.Equals("repeat"))
            {
                str = "";
                return (int)Tokens.repeatT;
            }
            else if (str.Equals("then"))
            {
                str = "";
                return (int)Tokens.then;
            }
            else if (str.Equals("true"))
            {
                str = "";
                return (int)Tokens.trueT;
            }
            else if (str.Equals("false"))
            {
                str = "";
                return (int)Tokens.falseT;
            }
            else if (str.Equals("for"))
            {
                str = "";
                return (int)Tokens.forT;
            }
            else if (str.Equals("while"))
            {
                str = "";
                return (int)Tokens.whileT;
            }
            else if (str.Equals("until"))
            {
                str = "";
                return (int)Tokens.untilT;
            }
            else
            {
                yylval = char.ToLower(str[0]) - 'a';
                str.Remove(0, 1);
                return (int)Tokens.CHAR;
            }

        }
        else
            switch (ch)
            {
                case '+':
                case '-':
                case '*':
                case '/':
                case '(':
                case ')':
                case '%':
                case '=':
                case ';':
                case '{':
                case '}':
                    return ch;
                default:
                    Console.Error.WriteLine("Illegal character '{0}'", ch);
                    return yylex();
            }
    }

    public override void yyerror(string format, params object[] args)
    {
        Console.Error.WriteLine(format, args);
    }
}


  