// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  AVATAR-èä
// DateTime: 16.11.2011 21:11:40
// UserName: Avatar
// Input file <Grammar_LUA.y>

// options: lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

public enum Tokens {error=126,
    EOF=127,CHAR=128,DIGIT=129,end=130,inT=131,repeatT=132,
    breakT=133,falseT=134,local=135,returnT=136,doT=137,forT=138,
    nil=139,then=140,elseT=141,functionT=142,trueT=143,elseifT=144,
    ifT=145,untilT=146,whileT=147,SMTH=148,ge=149,le=150,
    e=151,ne=152,doublePoint=153,or=154,and=155,not=156,
    UMINUS=157};

public class Parser: ShiftReduceParser<int, LexLocation>
{
#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

  protected override void Initialize()
  {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

    this.InitStateTable(214);
    AddState(0,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-1,1,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{127,4,59,5,133,211,136,212},new int[]{-4,207}));
    AddState(4,new State(-2));
    AddState(5,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-5,6,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(6,new State(-6));
    AddState(7,new State(new int[]{61,8,44,205}));
    AddState(8,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-8,9,-10,10,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(9,new State(-8));
    AddState(10,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39,44,203,127,-40,59,-40,133,-40,136,-40,41,-40,137,-40}));
    AddState(11,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,12,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(12,new State(new int[]{42,-51,47,-51,37,-51,43,-51,45,-51,94,21,153,-51,60,-51,62,-51,150,-51,149,-51,151,-51,152,-51,155,-51,154,-51,44,-51,127,-51,59,-51,133,-51,136,-51,93,-51,41,-51,125,-51,137,-51,140,-51}));
    AddState(13,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,14,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(14,new State(new int[]{42,-52,47,-52,37,-52,43,-52,45,-52,94,21,153,-52,60,-52,62,-52,150,-52,149,-52,151,-52,152,-52,155,-52,154,-52,44,-52,127,-52,59,-52,133,-52,136,-52,93,-52,41,-52,125,-52,137,-52,140,-52}));
    AddState(15,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,16,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(16,new State(new int[]{42,-53,47,-53,37,-53,43,-53,45,-53,94,21,153,-53,60,-53,62,-53,150,-53,149,-53,151,-53,152,-53,155,-53,154,-53,44,-53,127,-53,59,-53,133,-53,136,-53,93,-53,41,-53,125,-53,137,-53,140,-53}));
    AddState(17,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,18,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(18,new State(new int[]{42,11,47,13,37,15,43,-54,45,-54,94,21,153,-54,60,-54,62,-54,150,-54,149,-54,151,-54,152,-54,155,37,154,-54,44,-54,127,-54,59,-54,133,-54,136,-54,93,-54,41,-54,125,-54,137,-54,140,-54}));
    AddState(19,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,20,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(20,new State(new int[]{42,11,47,13,37,15,43,-55,45,-55,94,21,153,-55,60,-55,62,-55,150,-55,149,-55,151,-55,152,-55,155,37,154,-55,44,-55,127,-55,59,-55,133,-55,136,-55,93,-55,41,-55,125,-55,137,-55,140,-55}));
    AddState(21,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,22,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(22,new State(-56));
    AddState(23,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,24,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(24,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,-57,60,-57,62,-57,150,-57,149,-57,151,-57,152,-57,155,37,154,39,44,-57,127,-57,59,-57,133,-57,136,-57,93,-57,41,-57,125,-57,137,-57,140,-57}));
    AddState(25,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,26,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(26,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,-58,62,-58,150,-58,149,-58,151,-58,152,-58,155,37,154,39,44,-58,127,-58,59,-58,133,-58,136,-58,93,-58,41,-58,125,-58,137,-58,140,-58}));
    AddState(27,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,28,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(28,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,-59,62,-59,150,-59,149,-59,151,-59,152,-59,155,37,154,39,44,-59,127,-59,59,-59,133,-59,136,-59,93,-59,41,-59,125,-59,137,-59,140,-59}));
    AddState(29,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,30,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(30,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,-60,62,-60,150,-60,149,-60,151,-60,152,-60,155,37,154,39,44,-60,127,-60,59,-60,133,-60,136,-60,93,-60,41,-60,125,-60,137,-60,140,-60}));
    AddState(31,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,32,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(32,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,-61,62,-61,150,-61,149,-61,151,-61,152,-61,155,37,154,39,44,-61,127,-61,59,-61,133,-61,136,-61,93,-61,41,-61,125,-61,137,-61,140,-61}));
    AddState(33,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,34,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(34,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,-62,62,-62,150,-62,149,-62,151,-62,152,-62,155,37,154,39,44,-62,127,-62,59,-62,133,-62,136,-62,93,-62,41,-62,125,-62,137,-62,140,-62}));
    AddState(35,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,36,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(36,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,-63,62,-63,150,-63,149,-63,151,-63,152,-63,155,37,154,39,44,-63,127,-63,59,-63,133,-63,136,-63,93,-63,41,-63,125,-63,137,-63,140,-63}));
    AddState(37,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,38,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(38,new State(new int[]{42,-64,47,-64,37,-64,43,-64,45,-64,94,21,153,-64,60,-64,62,-64,150,-64,149,-64,151,-64,152,-64,155,-64,154,-64,44,-64,127,-64,59,-64,133,-64,136,-64,93,-64,41,-64,125,-64,137,-64,140,-64}));
    AddState(39,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,40,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(40,new State(new int[]{42,11,47,13,37,15,43,-65,45,-65,94,21,153,-65,60,-65,62,-65,150,-65,149,-65,151,-65,152,-65,155,37,154,-65,44,-65,127,-65,59,-65,133,-65,136,-65,93,-65,41,-65,125,-65,137,-65,140,-65}));
    AddState(41,new State(-42));
    AddState(42,new State(-43));
    AddState(43,new State(-44));
    AddState(44,new State(new int[]{129,45,46,46,42,-45,47,-45,37,-45,43,-45,45,-45,94,-45,153,-45,60,-45,62,-45,150,-45,149,-45,151,-45,152,-45,155,-45,154,-45,44,-45,127,-45,59,-45,133,-45,136,-45,93,-45,41,-45,125,-45,137,-45,140,-45}));
    AddState(45,new State(-104));
    AddState(46,new State(new int[]{129,47}));
    AddState(47,new State(-106));
    AddState(48,new State(-105));
    AddState(49,new State(-46));
    AddState(50,new State(new int[]{128,54},new int[]{-29,51}));
    AddState(51,new State(new int[]{34,52,128,53}));
    AddState(52,new State(-101));
    AddState(53,new State(-103));
    AddState(54,new State(-102));
    AddState(55,new State(-47));
    AddState(56,new State(-48));
    AddState(57,new State(new int[]{40,59},new int[]{-16,58}));
    AddState(58,new State(-78));
    AddState(59,new State(new int[]{41,60,95,67,128,74,148,202},new int[]{-24,195,-14,199,-12,171}));
    AddState(60,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,61,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(61,new State(new int[]{130,62}));
    AddState(62,new State(-79));
    AddState(63,new State(-7));
    AddState(64,new State(-5));
    AddState(65,new State(new int[]{61,-33,44,-33,91,-69,46,-69,58,-69,40,-69,123,-69,34,-69}));
    AddState(66,new State(-35));
    AddState(67,new State(new int[]{128,54,129,72,95,73},new int[]{-28,68,-29,71}));
    AddState(68,new State(new int[]{129,69,95,70,61,-94,44,-94,91,-94,46,-94,58,-94,40,-94,123,-94,34,-94,42,-94,47,-94,37,-94,43,-94,45,-94,94,-94,153,-94,60,-94,62,-94,150,-94,149,-94,151,-94,152,-94,155,-94,154,-94,127,-94,59,-94,133,-94,136,-94,93,-94,41,-94,125,-94,137,-94,140,-94,131,-94}));
    AddState(69,new State(-99));
    AddState(70,new State(-100));
    AddState(71,new State(new int[]{128,53,129,-96,95,-96,61,-96,44,-96,91,-96,46,-96,58,-96,40,-96,123,-96,34,-96,42,-96,47,-96,37,-96,43,-96,45,-96,94,-96,153,-96,60,-96,62,-96,150,-96,149,-96,151,-96,152,-96,155,-96,154,-96,127,-96,59,-96,133,-96,136,-96,93,-96,41,-96,125,-96,137,-96,140,-96,131,-96}));
    AddState(72,new State(-97));
    AddState(73,new State(-98));
    AddState(74,new State(new int[]{128,54,129,72,95,73},new int[]{-28,75,-29,71}));
    AddState(75,new State(new int[]{129,69,95,70,61,-95,44,-95,91,-95,46,-95,58,-95,40,-95,123,-95,34,-95,42,-95,47,-95,37,-95,43,-95,45,-95,94,-95,153,-95,60,-95,62,-95,150,-95,149,-95,151,-95,152,-95,155,-95,154,-95,127,-95,59,-95,133,-95,136,-95,93,-95,41,-95,125,-95,137,-95,140,-95,131,-95}));
    AddState(76,new State(new int[]{91,77,46,121,58,82,40,85,123,95,34,50},new int[]{-23,81,-22,119,-20,120}));
    AddState(77,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,78,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(78,new State(new int[]{93,79,42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39}));
    AddState(79,new State(-36));
    AddState(80,new State(new int[]{91,77,58,82,46,121,40,85,123,95,34,50,42,-49,47,-49,37,-49,43,-49,45,-49,94,-49,153,-49,60,-49,62,-49,150,-49,149,-49,151,-49,152,-49,155,-49,154,-49,44,-49,127,-49,59,-49,133,-49,136,-49,93,-49,41,-49,125,-49,137,-49,140,-49},new int[]{-23,81,-22,119,-20,120}));
    AddState(81,new State(-72));
    AddState(82,new State(new int[]{95,67,128,74},new int[]{-12,83}));
    AddState(83,new State(new int[]{40,85,123,95,34,50},new int[]{-23,84,-22,119,-20,120}));
    AddState(84,new State(-73));
    AddState(85,new State(new int[]{41,86,139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-8,87,-10,10,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(86,new State(-74));
    AddState(87,new State(new int[]{41,88}));
    AddState(88,new State(-75));
    AddState(89,new State(-69));
    AddState(90,new State(-70));
    AddState(91,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,92,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(92,new State(new int[]{41,93,42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39}));
    AddState(93,new State(-71));
    AddState(94,new State(-50));
    AddState(95,new State(new int[]{125,117,91,100,95,67,128,74,139,41,134,42,143,43,129,48,34,50,148,55,142,57,40,91,123,95,156,105,35,107,157,109},new int[]{-25,96,-26,118,-12,111,-10,114,-19,44,-20,49,-21,56,-18,80,-17,89,-9,90,-22,94}));
    AddState(96,new State(new int[]{125,97,44,115,59,116},new int[]{-27,98}));
    AddState(97,new State(-84));
    AddState(98,new State(new int[]{91,100,95,67,128,74,139,41,134,42,143,43,129,48,34,50,148,55,142,57,40,91,123,95,156,105,35,107,157,109,125,-88,44,-88,59,-88},new int[]{-26,99,-12,111,-10,114,-19,44,-20,49,-21,56,-18,80,-17,89,-9,90,-22,94}));
    AddState(99,new State(-87));
    AddState(100,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,101,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(101,new State(new int[]{93,102,42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39}));
    AddState(102,new State(new int[]{61,103}));
    AddState(103,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,104,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(104,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39,125,-89,44,-89,59,-89}));
    AddState(105,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,106,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(106,new State(-66));
    AddState(107,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,108,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(108,new State(-67));
    AddState(109,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,110,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(110,new State(-68));
    AddState(111,new State(new int[]{61,112,91,-35,58,-35,46,-35,40,-35,123,-35,34,-35,42,-35,47,-35,37,-35,43,-35,45,-35,94,-35,153,-35,60,-35,62,-35,150,-35,149,-35,151,-35,152,-35,155,-35,154,-35,125,-35,44,-35,59,-35}));
    AddState(112,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,113,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(113,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39,125,-90,44,-90,59,-90}));
    AddState(114,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39,125,-91,44,-91,59,-91}));
    AddState(115,new State(-92));
    AddState(116,new State(-93));
    AddState(117,new State(-85));
    AddState(118,new State(-86));
    AddState(119,new State(-76));
    AddState(120,new State(-77));
    AddState(121,new State(new int[]{95,67,128,74},new int[]{-12,122}));
    AddState(122,new State(-37));
    AddState(123,new State(new int[]{91,-70,46,-70,58,-70,40,-70,123,-70,34,-70,127,-9,59,-9,133,-9,136,-9}));
    AddState(124,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,125,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(125,new State(new int[]{130,126}));
    AddState(126,new State(-10));
    AddState(127,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,128,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(128,new State(new int[]{137,129,42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39}));
    AddState(129,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,130,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(130,new State(new int[]{130,131}));
    AddState(131,new State(-11));
    AddState(132,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,133,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(133,new State(new int[]{146,134}));
    AddState(134,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,135,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(135,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39,127,-12,59,-12,133,-12,136,-12}));
    AddState(136,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,137,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(137,new State(new int[]{140,138,42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39}));
    AddState(138,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,139,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(139,new State(new int[]{130,140,141,141,144,185,95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-11,180,-6,189,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(140,new State(-13));
    AddState(141,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,142,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(142,new State(new int[]{130,143}));
    AddState(143,new State(-14));
    AddState(144,new State(new int[]{95,67,128,74},new int[]{-12,145,-14,174}));
    AddState(145,new State(new int[]{61,146,131,-38,44,-38}));
    AddState(146,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,147,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(147,new State(new int[]{44,148,42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39}));
    AddState(148,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,149,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(149,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39,44,172,137,-24},new int[]{-13,150}));
    AddState(150,new State(new int[]{137,151}));
    AddState(151,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,152,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(152,new State(new int[]{130,153}));
    AddState(153,new State(-17));
    AddState(154,new State(new int[]{95,67,128,74},new int[]{-15,155,-12,161}));
    AddState(155,new State(new int[]{46,157,58,159,40,59},new int[]{-16,156}));
    AddState(156,new State(-19));
    AddState(157,new State(new int[]{95,67,128,74},new int[]{-12,158}));
    AddState(158,new State(-31));
    AddState(159,new State(new int[]{95,67,128,74},new int[]{-12,160}));
    AddState(160,new State(-32));
    AddState(161,new State(-30));
    AddState(162,new State(new int[]{142,163,95,67,128,74},new int[]{-14,166,-12,171}));
    AddState(163,new State(new int[]{95,67,128,74},new int[]{-12,164}));
    AddState(164,new State(new int[]{40,59},new int[]{-16,165}));
    AddState(165,new State(-20));
    AddState(166,new State(new int[]{61,167,44,169,127,-21,59,-21,133,-21,136,-21}));
    AddState(167,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-8,168,-10,10,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(168,new State(-22));
    AddState(169,new State(new int[]{95,67,128,74},new int[]{-12,170}));
    AddState(170,new State(-39));
    AddState(171,new State(-38));
    AddState(172,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,173,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(173,new State(new int[]{42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39,137,-23}));
    AddState(174,new State(new int[]{131,175,44,169}));
    AddState(175,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-8,176,-10,10,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(176,new State(new int[]{137,177}));
    AddState(177,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,178,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(178,new State(new int[]{130,179}));
    AddState(179,new State(-18));
    AddState(180,new State(new int[]{130,181,141,182}));
    AddState(181,new State(-15));
    AddState(182,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,183,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(183,new State(new int[]{130,184}));
    AddState(184,new State(-16));
    AddState(185,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,186,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(186,new State(new int[]{140,187,42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39}));
    AddState(187,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,188,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(188,new State(-25));
    AddState(189,new State(new int[]{144,185,95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-11,190,-6,189,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(190,new State(new int[]{144,191}));
    AddState(191,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-10,192,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(192,new State(new int[]{140,193,42,11,47,13,37,15,43,17,45,19,94,21,153,23,60,25,62,27,150,29,149,31,151,33,152,35,155,37,154,39}));
    AddState(193,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,194,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(194,new State(-26));
    AddState(195,new State(new int[]{41,196}));
    AddState(196,new State(new int[]{95,67,128,74,40,91,137,124,147,127,132,132,145,136,138,144,142,154,135,162},new int[]{-6,197,-1,63,-3,3,-5,64,-7,7,-17,65,-12,66,-18,76,-9,123}));
    AddState(197,new State(new int[]{130,198}));
    AddState(198,new State(-80));
    AddState(199,new State(new int[]{44,200,41,-81}));
    AddState(200,new State(new int[]{148,201,95,67,128,74},new int[]{-12,170}));
    AddState(201,new State(-83));
    AddState(202,new State(-82));
    AddState(203,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109},new int[]{-8,204,-10,10,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(204,new State(-41));
    AddState(205,new State(new int[]{95,67,128,74,40,91},new int[]{-17,206,-12,66,-18,76,-9,90}));
    AddState(206,new State(new int[]{61,-34,44,-34,91,-69,46,-69,58,-69,40,-69,123,-69,34,-69}));
    AddState(207,new State(new int[]{127,208,59,209}));
    AddState(208,new State(-3));
    AddState(209,new State(new int[]{127,210}));
    AddState(210,new State(-4));
    AddState(211,new State(-27));
    AddState(212,new State(new int[]{139,41,134,42,143,43,129,48,34,50,148,55,142,57,95,67,128,74,40,91,123,95,156,105,35,107,157,109,127,-28,59,-28},new int[]{-8,213,-10,10,-19,44,-20,49,-21,56,-18,80,-17,89,-12,66,-9,90,-22,94}));
    AddState(213,new State(-29));

    Rule[] rules=new Rule[107];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3,127});
    rules[3]=new Rule(-1, new int[]{-3,-4,127});
    rules[4]=new Rule(-1, new int[]{-3,-4,59,127});
    rules[5]=new Rule(-3, new int[]{-5});
    rules[6]=new Rule(-3, new int[]{-3,59,-5});
    rules[7]=new Rule(-6, new int[]{-1});
    rules[8]=new Rule(-5, new int[]{-7,61,-8});
    rules[9]=new Rule(-5, new int[]{-9});
    rules[10]=new Rule(-5, new int[]{137,-6,130});
    rules[11]=new Rule(-5, new int[]{147,-10,137,-6,130});
    rules[12]=new Rule(-5, new int[]{132,-6,146,-10});
    rules[13]=new Rule(-5, new int[]{145,-10,140,-6,130});
    rules[14]=new Rule(-5, new int[]{145,-10,140,-6,141,-6,130});
    rules[15]=new Rule(-5, new int[]{145,-10,140,-6,-11,130});
    rules[16]=new Rule(-5, new int[]{145,-10,140,-6,-11,141,-6,130});
    rules[17]=new Rule(-5, new int[]{138,-12,61,-10,44,-10,-13,137,-6,130});
    rules[18]=new Rule(-5, new int[]{138,-14,131,-8,137,-6,130});
    rules[19]=new Rule(-5, new int[]{142,-15,-16});
    rules[20]=new Rule(-5, new int[]{135,142,-12,-16});
    rules[21]=new Rule(-5, new int[]{135,-14});
    rules[22]=new Rule(-5, new int[]{135,-14,61,-8});
    rules[23]=new Rule(-13, new int[]{44,-10});
    rules[24]=new Rule(-13, new int[]{});
    rules[25]=new Rule(-11, new int[]{144,-10,140,-6});
    rules[26]=new Rule(-11, new int[]{-6,-11,144,-10,140,-6});
    rules[27]=new Rule(-4, new int[]{133});
    rules[28]=new Rule(-4, new int[]{136});
    rules[29]=new Rule(-4, new int[]{136,-8});
    rules[30]=new Rule(-15, new int[]{-12});
    rules[31]=new Rule(-15, new int[]{-15,46,-12});
    rules[32]=new Rule(-15, new int[]{-15,58,-12});
    rules[33]=new Rule(-7, new int[]{-17});
    rules[34]=new Rule(-7, new int[]{-7,44,-17});
    rules[35]=new Rule(-17, new int[]{-12});
    rules[36]=new Rule(-17, new int[]{-18,91,-10,93});
    rules[37]=new Rule(-17, new int[]{-18,46,-12});
    rules[38]=new Rule(-14, new int[]{-12});
    rules[39]=new Rule(-14, new int[]{-14,44,-12});
    rules[40]=new Rule(-8, new int[]{-10});
    rules[41]=new Rule(-8, new int[]{-10,44,-8});
    rules[42]=new Rule(-10, new int[]{139});
    rules[43]=new Rule(-10, new int[]{134});
    rules[44]=new Rule(-10, new int[]{143});
    rules[45]=new Rule(-10, new int[]{-19});
    rules[46]=new Rule(-10, new int[]{-20});
    rules[47]=new Rule(-10, new int[]{148});
    rules[48]=new Rule(-10, new int[]{-21});
    rules[49]=new Rule(-10, new int[]{-18});
    rules[50]=new Rule(-10, new int[]{-22});
    rules[51]=new Rule(-10, new int[]{-10,42,-10});
    rules[52]=new Rule(-10, new int[]{-10,47,-10});
    rules[53]=new Rule(-10, new int[]{-10,37,-10});
    rules[54]=new Rule(-10, new int[]{-10,43,-10});
    rules[55]=new Rule(-10, new int[]{-10,45,-10});
    rules[56]=new Rule(-10, new int[]{-10,94,-10});
    rules[57]=new Rule(-10, new int[]{-10,153,-10});
    rules[58]=new Rule(-10, new int[]{-10,60,-10});
    rules[59]=new Rule(-10, new int[]{-10,62,-10});
    rules[60]=new Rule(-10, new int[]{-10,150,-10});
    rules[61]=new Rule(-10, new int[]{-10,149,-10});
    rules[62]=new Rule(-10, new int[]{-10,151,-10});
    rules[63]=new Rule(-10, new int[]{-10,152,-10});
    rules[64]=new Rule(-10, new int[]{-10,155,-10});
    rules[65]=new Rule(-10, new int[]{-10,154,-10});
    rules[66]=new Rule(-10, new int[]{156,-10});
    rules[67]=new Rule(-10, new int[]{35,-10});
    rules[68]=new Rule(-10, new int[]{157,-10});
    rules[69]=new Rule(-18, new int[]{-17});
    rules[70]=new Rule(-18, new int[]{-9});
    rules[71]=new Rule(-18, new int[]{40,-10,41});
    rules[72]=new Rule(-9, new int[]{-18,-23});
    rules[73]=new Rule(-9, new int[]{-18,58,-12,-23});
    rules[74]=new Rule(-23, new int[]{40,41});
    rules[75]=new Rule(-23, new int[]{40,-8,41});
    rules[76]=new Rule(-23, new int[]{-22});
    rules[77]=new Rule(-23, new int[]{-20});
    rules[78]=new Rule(-21, new int[]{142,-16});
    rules[79]=new Rule(-16, new int[]{40,41,-6,130});
    rules[80]=new Rule(-16, new int[]{40,-24,41,-6,130});
    rules[81]=new Rule(-24, new int[]{-14});
    rules[82]=new Rule(-24, new int[]{148});
    rules[83]=new Rule(-24, new int[]{-14,44,148});
    rules[84]=new Rule(-22, new int[]{123,-25,125});
    rules[85]=new Rule(-22, new int[]{123,125});
    rules[86]=new Rule(-25, new int[]{-26});
    rules[87]=new Rule(-25, new int[]{-25,-27,-26});
    rules[88]=new Rule(-25, new int[]{-25,-27});
    rules[89]=new Rule(-26, new int[]{91,-10,93,61,-10});
    rules[90]=new Rule(-26, new int[]{-12,61,-10});
    rules[91]=new Rule(-26, new int[]{-10});
    rules[92]=new Rule(-27, new int[]{44});
    rules[93]=new Rule(-27, new int[]{59});
    rules[94]=new Rule(-12, new int[]{95,-28});
    rules[95]=new Rule(-12, new int[]{128,-28});
    rules[96]=new Rule(-28, new int[]{-29});
    rules[97]=new Rule(-28, new int[]{129});
    rules[98]=new Rule(-28, new int[]{95});
    rules[99]=new Rule(-28, new int[]{-28,129});
    rules[100]=new Rule(-28, new int[]{-28,95});
    rules[101]=new Rule(-20, new int[]{34,-29,34});
    rules[102]=new Rule(-29, new int[]{128});
    rules[103]=new Rule(-29, new int[]{-29,128});
    rules[104]=new Rule(-19, new int[]{-19,129});
    rules[105]=new Rule(-19, new int[]{129});
    rules[106]=new Rule(-19, new int[]{-19,46,129});
    this.InitRules(rules);

    this.InitNonTerminals(new string[] {"", "CHUNK", "$accept", "STAT_LIST", "LASTSTAT", 
      "STAT", "BLOCK", "VARLIST1", "EXPLIST1", "FUNCTION_CALL", "EXP", "ELSEIF_STAT", 
      "NAME", "EXP_LIST", "NAME_LIST", "FUNCNAME", "FUNCBODY", "VAR", "PREFIXEXP", 
      "NUMBER", "STRING", "FUNCTION", "TABLE_CONSTRUCTOR", "ARGS", "PARLIST1", 
      "FIELDLIST", "FIELD", "FIELD_SEP", "NAME_SEQ", "CHAR_SEQUENCE", });
  }

  protected override void DoAction(int action)
  {
    /*switch (action)
    {
    }*/
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }
  public Parser() : base(null) { }
    /*
     * Copied from GPPG documentation.
     */
}

public class Lexer : QUT.Gppg.AbstractScanner<int, LexLocation>
{
    private System.IO.TextReader reader;
    private string str;

    //
    // Version 1.2.0 needed the following code.
    // In V1.2.1 the base class provides this empty default.
    //
    // public override LexLocation yylloc { 
    //     get { return null; } 
    //     set { /* skip */; }
    // }
    //

    public Lexer(System.IO.TextReader reader)
    {
        str = "";
        this.reader = reader;
    }

    public override int yylex()
    {
        if (!str.Equals(""))
        {
            yylval = char.ToLower(str[0]) - 'a';
            str = str.Remove(0, 1);
            return (int)Tokens.CHAR;
        }
        char ch;
        int ord = reader.Read();
        //
        // Must check for EOF
        //
        if (ord == -1)
            return (int)Tokens.EOF;
        else
            ch = (char)ord;

        if (ch == '\n')
            //return ch;
            return yylex();
        else if (char.IsWhiteSpace(ch))
            return yylex();
        else if (char.IsDigit(ch))
        {
            yylval = ch - '0';
            return (int)Tokens.DIGIT;
        }
        // Don't use IsLetter here!
        else if ((ch >= 'a' && ch <= 'z') ||
                 (ch >= 'A' && ch <= 'Z'))
        {
            str = "";
            int i = 0;
            while ((ch >= 'a' && ch <= 'z') ||
                   (ch >= 'A' && ch <= 'Z'))
            {
                str = str.Insert(i, ch.ToString());
                ord = reader.Read();
                if (ord == -1)
                {
                }
                else
                {
                    ch = (char)ord;
                    i++;
                }
            }
            if (str.Equals("function"))
            {
                str = "";
                return (int)Tokens.functionT;
            }
            else if (str.Equals("do"))
            {
                str = "";
                return (int)Tokens.doT;
            }
            else if (str.Equals("elseif"))
            {
                str = "";
                return (int)Tokens.elseifT;
            }
            else if (str.Equals("if"))
            {
                str = "";
                return (int)Tokens.ifT;
            }
            else if (str.Equals("else"))
            {
                str = "";
                return (int)Tokens.elseT;
            }
            else if (str.Equals("return"))
            {
                str = "";
                return (int)Tokens.returnT;
            }
            else if (str.Equals("repeat"))
            {
                str = "";
                return (int)Tokens.repeatT;
            }
            else if (str.Equals("then"))
            {
                str = "";
                return (int)Tokens.then;
            }
            else if (str.Equals("true"))
            {
                str = "";
                return (int)Tokens.trueT;
            }
            else if (str.Equals("false"))
            {
                str = "";
                return (int)Tokens.falseT;
            }
            else if (str.Equals("for"))
            {
                str = "";
                return (int)Tokens.forT;
            }
            else if (str.Equals("while"))
            {
                str = "";
                return (int)Tokens.whileT;
            }
            else if (str.Equals("until"))
            {
                str = "";
                return (int)Tokens.untilT;
            }
            else
            {
                yylval = char.ToLower(str[0]) - 'a';
                str.Remove(0, 1);
                return (int)Tokens.CHAR;
            }

        }
        else
            switch (ch)
            {
                case '+':
                case '-':
                case '*':
                case '/':
                case '(':
                case ')':
                case '%':
                case '=':
                case ';':
                    return ch;
                default:
                    Console.Error.WriteLine("Illegal character '{0}'", ch);
                    return yylex();
            }
    }

    public override void yyerror(string format, params object[] args)
    {
        Console.Error.WriteLine(format, args);
    }
}
