Entering state 0 
Reducing stack by rule 4, /* empty */ -> CHUNK
State now 0
Entering state 3 
Reading a token: functionT
Next token is functionT
Shifting token functionT, Entering state 162 
Reading a token: Identifer lol
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 110, identifer -> NAME
State now 0 3 162
Entering state 179 
Reading a token: (
Next token is '('
Reducing stack by rule 33, NAME -> FUNCNAME
State now 0 3 162
Entering state 163 
Next token is '('
Shifting token '(', Entering state 164 
Reading a token: Identifer str
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 110, identifer -> NAME
State now 0 3 162 163 164
Entering state 173 
Reducing stack by rule 46, /* empty */ -> NAME_LIST
State now 0 3 162 163 164 173
Entering state 174 
Reading a token: )
Next token is ')'
Reducing stack by rule 89, /* empty */ -> SMTH_OPT
State now 0 3 162 163 164 173 174
Entering state 175 
Reducing stack by rule 87, NAME NAME_LIST SMTH_OPT -> PARLIST1
State now 0 3 162 163 164
Entering state 171 
Reducing stack by rule 25, PARLIST1 -> PL_OPT
State now 0 3 162 163 164
Entering state 165 
Next token is ')'
Shifting token ')', Entering state 166 
Reducing stack by rule 19, /* empty */ -> Anon@1
State now 0 3 162 163 164 165 166
Entering state 167 
Reducing stack by rule 4, /* empty */ -> CHUNK
State now 0 3 162 163 164 165 166 167
Entering state 66 
Reading a token: eol
Identifer abc
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 110, identifer -> NAME
State now 0 3 162 163 164 165 166 167 66
Entering state 51 
Reducing stack by rule 39, NAME -> VAR
State now 0 3 162 163 164 165 166 167 66
Entering state 67 
Reading a token: =
Next token is '='
Reducing stack by rule 38, /* empty */ -> VAR_LIST
State now 0 3 162 163 164 165 166 167 66 67
Entering state 68 
Next token is '='
Reducing stack by rule 36, VAR VAR_LIST -> VARLIST1
State now 0 3 162 163 164 165 166 167 66
Entering state 8 
Next token is '='
Shifting token '=', Entering state 9 
Reading a token: Identifer str
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 110, identifer -> NAME
State now 0 3 162 163 164 165 166 167 66 8 9
Entering state 51 
Reducing stack by rule 39, NAME -> VAR
State now 0 3 162 163 164 165 166 167 66 8 9
Entering state 50 
Reading a token: ;
Next token is ';'
Reducing stack by rule 54, VAR -> EXP
State now 0 3 162 163 164 165 166 167 66 8 9
Entering state 141 
Next token is ';'
Reducing stack by rule 48, EXP -> EXPLIST1
State now 0 3 162 163 164 165 166 167 66 8 9
Entering state 10 
Next token is ';'
Reducing stack by rule 8, VARLIST1 '=' EXPLIST1 -> STAT
State now 0 3 162 163 164 165 166 167 66
Entering state 5 
Next token is ';'
Shifting token ';', Entering state 7 
Reducing stack by rule 5, ';' -> COMMA
State now 0 3 162 163 164 165 166 167 66 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0 3 162 163 164 165 166 167
Entering state 66 
Reading a token: eol
end
Next token is end
Reducing stack by rule 7, CHUNK -> BLOCK
State now 0 3 162 163 164 165 166 167
Entering state 168 
Reducing stack by rule 20, /* empty */ -> Anon@2
State now 0 3 162 163 164 165 166 167 168
Entering state 169 
Next token is end
Shifting token end, Entering state 170 
Reducing stack by rule 21, functionT FUNCNAME '(' PL_OPT ')' Anon@1 BLOCK Anon@2 end -> STAT
State now 0 3
Entering state 5 
Reading a token: eol
eol
Identifer lol
Next token is identifer
Reducing stack by rule 6, /* empty */ -> COMMA
State now 0 3 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0
Entering state 3 
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 110, identifer -> NAME
State now 0 3
Entering state 51 
Reducing stack by rule 39, NAME -> VAR
State now 0 3
Entering state 67 
Reading a token: (
Next token is '('
Reducing stack by rule 42, VAR -> VARORFUNC
State now 0 3
Entering state 53 
Next token is '('
Shifting token '(', Entering state 199 
Reading a token: string "Hello world!"
Next token is str
Shifting token str, Entering state 49 
Reducing stack by rule 53, str -> EXP
State now 0 3 53 199
Entering state 141 
Reading a token: )
Next token is ')'
Reducing stack by rule 48, EXP -> EXPLIST1
State now 0 3 53 199
Entering state 202 
Next token is ')'
Reducing stack by rule 83, EXPLIST1 -> EXP_LIST_OPT
State now 0 3 53 199
Entering state 200 
Next token is ')'
Shifting token ')', Entering state 201 
Reducing stack by rule 80, '(' EXP_LIST_OPT ')' -> ARGS
State now 0 3 53
Entering state 195 
Reducing stack by rule 78, VARORFUNC ARGS -> FUNCTION_CALL
State now 0 3
Entering state 72 
Reading a token: ;
Next token is ';'
Reducing stack by rule 9, FUNCTION_CALL -> STAT
State now 0 3
Entering state 5 
Next token is ';'
Shifting token ';', Entering state 7 
Reducing stack by rule 5, ';' -> COMMA
State now 0 3 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0
Entering state 3 
Reading a token: eol
Next token is EOF
Shifting token EOF, Entering state 4 
Reducing stack by rule 2, CHUNK EOF -> PROGRAM
State now 0
Entering state 1 
Next token is EOF
Shifting token EOF, Entering state 2 
Reducing stack by rule 1, PROGRAM EOF -> $accept
State now 0
