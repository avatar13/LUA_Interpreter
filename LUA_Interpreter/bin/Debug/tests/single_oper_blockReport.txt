Entering state 0 
Reducing stack by rule 4, /* empty */ -> CHUNK
State now 0
Entering state 3 
Reading a token: functionT
Next token is functionT
Shifting token functionT, Entering state 154 
Reading a token: Identifer abc
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154
Entering state 169 
Reading a token: (
Next token is '('
Reducing stack by rule 31, NAME -> FUNCNAME
State now 0 3 154
Entering state 155 
Next token is '('
Shifting token '(', Entering state 156 
Reading a token: )
Next token is ')'
Reducing stack by rule 24, /* empty */ -> PL_OPT
State now 0 3 154 155 156
Entering state 157 
Next token is ')'
Shifting token ')', Entering state 158 
Reducing stack by rule 4, /* empty */ -> CHUNK
State now 0 3 154 155 156 157 158
Entering state 66 
Reading a token: eol
Identifer a
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66
Entering state 67 
Reading a token: =
Next token is '='
Reducing stack by rule 36, /* empty */ -> VAR_LIST
State now 0 3 154 155 156 157 158 66 67
Entering state 68 
Next token is '='
Reducing stack by rule 34, VAR VAR_LIST -> VARLIST1
State now 0 3 154 155 156 157 158 66
Entering state 8 
Next token is '='
Shifting token '=', Entering state 9 
Reading a token: Digit:1
Next token is digit
Shifting token digit, Entering state 48 
Reducing stack by rule 107, digit -> NUMBER
State now 0 3 154 155 156 157 158 66 8 9
Entering state 44 
Reading a token: ;
Next token is ';'
Reducing stack by rule 50, NUMBER -> EXP
State now 0 3 154 155 156 157 158 66 8 9
Entering state 133 
Next token is ';'
Reducing stack by rule 46, EXP -> EXPLIST1
State now 0 3 154 155 156 157 158 66 8 9
Entering state 10 
Next token is ';'
Reducing stack by rule 8, VARLIST1 '=' EXPLIST1 -> STAT
State now 0 3 154 155 156 157 158 66
Entering state 5 
Next token is ';'
Shifting token ';', Entering state 7 
Reducing stack by rule 5, ';' -> COMMA
State now 0 3 154 155 156 157 158 66 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0 3 154 155 156 157 158
Entering state 66 
Reading a token: eol
Identifer b
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66
Entering state 67 
Reading a token: =
Next token is '='
Reducing stack by rule 36, /* empty */ -> VAR_LIST
State now 0 3 154 155 156 157 158 66 67
Entering state 68 
Next token is '='
Reducing stack by rule 34, VAR VAR_LIST -> VARLIST1
State now 0 3 154 155 156 157 158 66
Entering state 8 
Next token is '='
Shifting token '=', Entering state 9 
Reading a token: Digit:3
Next token is digit
Shifting token digit, Entering state 48 
Reducing stack by rule 107, digit -> NUMBER
State now 0 3 154 155 156 157 158 66 8 9
Entering state 44 
Reading a token: ;
Next token is ';'
Reducing stack by rule 50, NUMBER -> EXP
State now 0 3 154 155 156 157 158 66 8 9
Entering state 133 
Next token is ';'
Reducing stack by rule 46, EXP -> EXPLIST1
State now 0 3 154 155 156 157 158 66 8 9
Entering state 10 
Next token is ';'
Reducing stack by rule 8, VARLIST1 '=' EXPLIST1 -> STAT
State now 0 3 154 155 156 157 158 66
Entering state 5 
Next token is ';'
Shifting token ';', Entering state 7 
Reducing stack by rule 5, ';' -> COMMA
State now 0 3 154 155 156 157 158 66 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0 3 154 155 156 157 158
Entering state 66 
Reading a token: eol
if
Next token is ifT
Shifting token ifT, Entering state 118 
Reading a token: (
Next token is '('
Shifting token '(', Entering state 94 
Reading a token: Identifer a
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66 118 94
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66 118 94
Entering state 50 
Reading a token: <
Next token is '<'
Reducing stack by rule 52, VAR -> EXP
State now 0 3 154 155 156 157 158 66 118 94
Entering state 95 
Next token is '<'
Shifting token '<', Entering state 27 
Reading a token: Identifer b
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66 118 94 95 27
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66 118 94 95 27
Entering state 50 
Reading a token: )
Next token is ')'
Reducing stack by rule 52, VAR -> EXP
State now 0 3 154 155 156 157 158 66 118 94 95 27
Entering state 28 
Next token is ')'
Reducing stack by rule 65, EXP '<' EXP -> EXP
State now 0 3 154 155 156 157 158 66 118 94
Entering state 95 
Next token is ')'
Shifting token ')', Entering state 96 
Reducing stack by rule 57, '(' EXP ')' -> EXP
State now 0 3 154 155 156 157 158 66 118
Entering state 57 
Reading a token: then
Next token is then
Reducing stack by rule 48, EXP -> EXP1
State now 0 3 154 155 156 157 158 66 118
Entering state 119 
Next token is then
Shifting token then, Entering state 120 
Reducing stack by rule 4, /* empty */ -> CHUNK
State now 0 3 154 155 156 157 158 66 118 119 120
Entering state 66 
Reading a token: eol
whileT
Next token is whileT
Shifting token whileT, Entering state 76 
Reading a token: Identifer a
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66 118 119 120 66 76
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66 118 119 120 66 76
Entering state 50 
Reading a token: <
Next token is '<'
Reducing stack by rule 52, VAR -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76
Entering state 57 
Next token is '<'
Shifting token '<', Entering state 27 
Reading a token: Identifer b
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 57 27
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 57 27
Entering state 50 
Reading a token: doT
Next token is doT
Reducing stack by rule 52, VAR -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 57 27
Entering state 28 
Next token is doT
Reducing stack by rule 65, EXP '<' EXP -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76
Entering state 57 
Next token is doT
Reducing stack by rule 48, EXP -> EXP1
State now 0 3 154 155 156 157 158 66 118 119 120 66 76
Entering state 77 
Next token is doT
Shifting token doT, Entering state 78 
Reducing stack by rule 4, /* empty */ -> CHUNK
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78
Entering state 66 
Reading a token: eol
Identifer a
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 67 
Reading a token: =
Next token is '='
Reducing stack by rule 36, /* empty */ -> VAR_LIST
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 67
Entering state 68 
Next token is '='
Reducing stack by rule 34, VAR VAR_LIST -> VARLIST1
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 8 
Next token is '='
Shifting token '=', Entering state 9 
Reading a token: Identifer a
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 8 9
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 8 9
Entering state 50 
Reading a token: +
Next token is '+'
Reducing stack by rule 52, VAR -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 8 9
Entering state 133 
Next token is '+'
Shifting token '+', Entering state 19 
Reading a token: Digit:1
Next token is digit
Shifting token digit, Entering state 48 
Reducing stack by rule 107, digit -> NUMBER
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 8 9 133 19
Entering state 44 
Reading a token: ;
Next token is ';'
Reducing stack by rule 50, NUMBER -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 8 9 133 19
Entering state 20 
Next token is ';'
Reducing stack by rule 61, EXP '+' EXP -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 8 9
Entering state 133 
Next token is ';'
Reducing stack by rule 46, EXP -> EXPLIST1
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 8 9
Entering state 10 
Next token is ';'
Reducing stack by rule 8, VARLIST1 '=' EXPLIST1 -> STAT
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 5 
Next token is ';'
Shifting token ';', Entering state 7 
Reducing stack by rule 5, ';' -> COMMA
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78
Entering state 66 
Reading a token: eol
Identifer print
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 67 
Reading a token: (
Next token is '('
Reducing stack by rule 40, VAR -> VARORFUNC
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 53 
Next token is '('
Shifting token '(', Entering state 189 
Reading a token: string "Next is"
Next token is str
Shifting token str, Entering state 49 
Reducing stack by rule 51, str -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 53 189
Entering state 133 
Reading a token: ..
Next token is doublePoint
Shifting token doublePoint, Entering state 25 
Reading a token: Identifer a
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 104, identifer -> NAME
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 53 189 133 25
Entering state 51 
Reducing stack by rule 37, NAME -> VAR
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 53 189 133 25
Entering state 50 
Reading a token: )
Next token is ')'
Reducing stack by rule 52, VAR -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 53 189 133 25
Entering state 26 
Next token is ')'
Reducing stack by rule 64, EXP doublePoint EXP -> EXP
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 53 189
Entering state 133 
Next token is ')'
Reducing stack by rule 46, EXP -> EXPLIST1
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 53 189
Entering state 192 
Next token is ')'
Reducing stack by rule 79, EXPLIST1 -> EXP_LIST_OPT
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 53 189
Entering state 190 
Next token is ')'
Shifting token ')', Entering state 191 
Reducing stack by rule 76, '(' EXP_LIST_OPT ')' -> ARGS
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 53
Entering state 185 
Reducing stack by rule 74, VARORFUNC ARGS -> FUNCTION_CALL
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 72 
Reading a token: ;
Next token is ';'
Reducing stack by rule 9, FUNCTION_CALL -> STAT
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66
Entering state 5 
Next token is ';'
Shifting token ';', Entering state 7 
Reducing stack by rule 5, ';' -> COMMA
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78 66 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78
Entering state 66 
Reading a token: eol
end
Next token is end
Reducing stack by rule 7, CHUNK -> BLOCK
State now 0 3 154 155 156 157 158 66 118 119 120 66 76 77 78
Entering state 79 
Next token is end
Shifting token end, Entering state 80 
Reducing stack by rule 11, whileT EXP1 doT BLOCK end -> STAT
State now 0 3 154 155 156 157 158 66 118 119 120 66
Entering state 5 
Reading a token: eol
end
Next token is end
Reducing stack by rule 6, /* empty */ -> COMMA
State now 0 3 154 155 156 157 158 66 118 119 120 66 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0 3 154 155 156 157 158 66 118 119 120
Entering state 66 
Next token is end
Reducing stack by rule 7, CHUNK -> BLOCK
State now 0 3 154 155 156 157 158 66 118 119 120
Entering state 121 
Reducing stack by rule 28, /* empty */ -> ELSEIF_LIST
State now 0 3 154 155 156 157 158 66 118 119 120 121
Entering state 122 
Next token is end
Reducing stack by rule 30, /* empty */ -> ELSE_LIST
State now 0 3 154 155 156 157 158 66 118 119 120 121 122
Entering state 123 
Next token is end
Shifting token end, Entering state 124 
Reducing stack by rule 13, ifT EXP1 then BLOCK ELSEIF_LIST ELSE_LIST end -> STAT
State now 0 3 154 155 156 157 158 66
Entering state 5 
Reading a token: eol
end
Next token is end
Reducing stack by rule 6, /* empty */ -> COMMA
State now 0 3 154 155 156 157 158 66 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0 3 154 155 156 157 158
Entering state 66 
Next token is end
Reducing stack by rule 7, CHUNK -> BLOCK
State now 0 3 154 155 156 157 158
Entering state 159 
Next token is end
Shifting token end, Entering state 160 
Reducing stack by rule 19, functionT FUNCNAME '(' PL_OPT ')' BLOCK end -> STAT
State now 0 3
Entering state 5 
Reading a token: Next token is EOF
Reducing stack by rule 6, /* empty */ -> COMMA
State now 0 3 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0
Entering state 3 
Next token is EOF
Shifting token EOF, Entering state 4 
Reducing stack by rule 2, CHUNK EOF -> PROGRAM
State now 0
Entering state 1 
Next token is EOF
Shifting token EOF, Entering state 2 
Reducing stack by rule 1, PROGRAM EOF -> $accept
State now 0
