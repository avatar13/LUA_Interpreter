Entering state 0 
Reducing stack by rule 4, /* empty */ -> CHUNK
State now 0
Entering state 3 
Reading a token: functionT
Next token is functionT
Shifting token functionT, Entering state 174 
Reading a token: Identifer lol
Next token is identifer
Shifting token identifer, Entering state 52 
Reducing stack by rule 122, identifer -> NAME
State now 0 3 174
Entering state 191 
Reading a token: (
Next token is '('
Reducing stack by rule 45, NAME -> FUNCNAME
State now 0 3 174
Entering state 175 
Next token is '('
Shifting token '(', Entering state 176 
Reading a token: )
Next token is ')'
Reducing stack by rule 38, /* empty */ -> PL_OPT
State now 0 3 174 175 176
Entering state 177 
Next token is ')'
Shifting token ')', Entering state 178 
Reducing stack by rule 31, /* empty */ -> Anon@13
State now 0 3 174 175 176 177 178
Entering state 179 
Reducing stack by rule 4, /* empty */ -> CHUNK
State now 0 3 174 175 176 177 178 179
Entering state 66 
Reading a token: eol
end
Next token is end
Reducing stack by rule 7, CHUNK -> BLOCK
State now 0 3 174 175 176 177 178 179
Entering state 180 
Reducing stack by rule 32, /* empty */ -> Anon@14
State now 0 3 174 175 176 177 178 179 180
Entering state 181 
Next token is end
Shifting token end, Entering state 182 
Reducing stack by rule 33, functionT FUNCNAME '(' PL_OPT ')' Anon@13 BLOCK Anon@14 end -> STAT
State now 0 3
Entering state 5 
Reading a token: Next token is EOF
Reducing stack by rule 6, /* empty */ -> COMMA
State now 0 3 5
Entering state 6 
Reducing stack by rule 3, CHUNK STAT COMMA -> CHUNK
State now 0
Entering state 3 
Next token is EOF
Shifting token EOF, Entering state 4 
Reducing stack by rule 2, CHUNK EOF -> PROGRAM
State now 0
Entering state 1 
Next token is EOF
Shifting token EOF, Entering state 2 
Reducing stack by rule 1, PROGRAM EOF -> $accept
State now 0
